<?xml version="1.0" encoding="utf-8"?>
<sect1 xml:id="install.hack.bootstrapping" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Bootstrapping a Project</title>
  <para>The static type system of Hack is enforced by a type checker external to the HHVM runtime itself. It runs in the background, watching for file modifications and updating its state. Getting this static type checker running requires a little bit of additional setup.</para>
  <sect2 xml:id="install.hack.bootstrapping.hhvm">
    <title>Running your project under HHVM</title>
    <para>The first step is to <link linkend="install">get HHVM running your project</link>. You should have the latest version of HHVM installed, have a <literal>php.ini</literal> or <literal>config.hdf</literal> set up if necessary, and HHVM running as a webserver serving your project.</para>
  </sect2>
  <sect2 xml:id="install.hack.bootstrapping.hh_server">
    <title>Getting the type checker running</title>
    <para>In the root of your project directory, create an empty file named <literal>.hhconfig</literal>. The type checker uses this file to know what directory tree to type check without needing to specify paths to every command.</para>
    <para>Now, run <literal>hh_client</literal>. This will start up the type checking daemon, wait for it to finish checking the current directory tree, and report any errors that it found. Since your code is at this point likely all PHP and not Hack code, it should report <literal>No errors</literal>.</para>
    <note>
      <para>
        When you run <literal>hh_client</literal>, it looks in the current directory for the <literal>.hhconfig</literal> file. If <literal>.hhconfig</literal> is not found in the current directory, the directory tree will be traversed upward looking for that file until it finds one (or not).
        <informalexample>
          <programlisting role="bash">
<![CDATA[
projects/
├── project-1/
│   └── app/
│       └── .hhconfig
├── project-2/
│   └── app/
└── .hhconfig
]]>
          </programlisting>
          <para>
            If you run <literal>hh_client</literal> in <literal>project-2</literal>, it will find the <literal>projects/.hhconfig</literal>, meaning you actually run <literal>hh_client</literal> for the whole <literal>projects</literal> directory, potentially exposing errors in <literal>project-1</literal> too. Also, if you run <literal>hh_client</literal> in <literal>project-1/app</literal> and there is an <literal>.hhconfig</literal> file there as well, the type checker will only check that directory, potentially ignoring other errors in <literal>project-1</literal>, outside the <literal>app</literal> directory.
          </para>
        </informalexample>
      </para>
      <para>
        The bottom line is to put an <literal>.hhconfig</literal> file in your project root and only your project root.
      </para>
    </note>
    <para>To test that it is working, try adding a file with these contents to your project:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

function f(): int {
  return 'not an int';
}
]]>
        </programlisting>
      </informalexample>
    </para>
    <para>The exact details of the Hack language and its type annotations are discussed in detail in later sections, but hopefully you see that this function contains a type error &#8212; it is annotated to return an int, but actually returns a string. If you re-run <literal>hh_client</literal>, it should report this type error. The type checker updated its state in the background, and <literal>hh_client</literal> retrieves that state.</para>
    <para>At this point, you can start changing your <literal>&lt;?php</literal> code into <literal>&lt;?hh</literal> code, adding annotations, and the type checker will verify more and more of your codebase as you convert! Some <link linkend="install.hack.conversion">automated conversion tools</link> are also available to help with the mechanical parts of this process.</para>
  </sect2>
  <sect2 xml:id="install.hack.bootstrapping.stdlib">
    <title>Library functions</title>
    <note>
      <para>
        <literal>.hhi</literal> files have been removed since HHVM 3.2. This
        section is only relevant for HHVM versions before 3.2.
      </para>
    </note>
    <para><literal>hh_server</literal> does not ship with any innate knowledge about the PHP and Hack standard libraries, but instead imports this information from <literal>hhi</literal> files that describe the type structure of the standard library. HHVM ships with a default set of such files, available at <literal>/usr/share/hhvm/hack/hhi</literal> in the default binary distribution or at <literal>hphp/hack/hhi</literal> in the source distribution.</para>
    <para>This directory contains information about the PHP standard library for the type checker to consume. It should be copied into a location visible to the type checker, but should <emphasis>not</emphasis> be ever executed at runtime or included in the autoloader. These files are effectively "interface" files that define types for parts of the standard library so the type checker can verify they are used correctly. The runtime will produce an error if an hhi file is ever loaded at runtime, since it will redefine a function or class already built in to the runtime.</para>
    <warning>
      <para>
        Due to the way the Hack type checker currently watches files for changes, etc. via <literal>inotify</literal>, you must <emphasis role="strong">copy</emphasis> the <literal>.hhi</literal> files to a location visible to the type checker. <emphasis>Symlinks will not work.</emphasis> This is an inotify limitation in the current version of incremental mode, and we are looking to address it.
      </para>
    </warning>
   </sect2>
  <sect2 xml:id="install.hack.bootstrapping.editors">
    <title>Included editor extensions</title>
    <para>Hack maintains support for plugins for some common editors. vim users can find a package in <link xlink:href="&url.hack.vim;">Github</link> with installation instructions in the <literal>README</literal> contained therein. emacs users will find a plugin inside <literal>/usr/share/hhvm/hack/emacs</literal>, included with the Hack package.</para>
    <para>Although <literal>hh_client</literal> can be used directly on the command line, having the immediate feedback directly in an editor can be an amazing productivity boost. If your preferred editor or IDE is unsupported, contributions of additional plugins are very welcome; the existing plugins are decent examples of how to script the <literal>hh_client</literal> interface.</para>
  </sect2>
  <sect2 xml:id="install.hack.bootstrapping.structure">
    <title>Notes on suggested project structure</title>
    <para>Hack and the Hack type checker were designed with certain assumptions and best practices in mind, and may not work well for projects that significantly diverge from this.</para>
    <para>The type checker assumes that there is a global autoloader that can load any class on demand. This means that it insists that all class and function names are unique, and has no notion of checking imports or anything of that nature. Futhermore, it does not support conditional definitions of functions or classes &#8212; it must be able to statically know what is and what is not defined. It is of course perfectly possible to have a project that meets these requirements without a global autoloader, and the type checker will work fine on such a project, but a project using an autoloader was the intended use case.</para>
    <para>Mixing HTML and Hack code are not supported by the type checker. Following and statically analyzing these complicated mode switches is unsupported, particularly since much modern code doesn't make use of this functionality. Hack code can output markup to the browser in a simple way via <literal>echo</literal>, or using a templating engine or <link linkend="hack.xhp">XHP</link> for more complex scenarios.</para>
  </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
