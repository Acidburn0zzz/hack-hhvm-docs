<?xml version="1.0" encoding="utf-8"?>
<sect1 xml:id="install.hack.conversion">
  <title>Converting an Existing Project to Hack</title>
  <para>Once you have a project running under HHVM and the type checker, we have several automated conversion tools to help with different aspects of fully converting a project to Hack &#8212; especially the static type system. The suggested workflow is:
    <orderedlist>
      <listitem><para>Make as much PHP code visible to the type checker as possible.</para></listitem>
      <listitem><para>Guess type annotations with a global inference tool, but log when they fail instead of failing hard.</para></listitem>
      <listitem><para>Parse error logs and remove annotations that do not match at runtime.</para></listitem>
      <listitem><para>Make the remaining annotations fail hard at runtime.</para></listitem>
    </orderedlist>
  </para>
  <sect2 xml:id="install.hack.conversion.hackificator">
    <title>Moving individual files over to Hack</title>
    <para>HHVM ships with a tool called the <literal>hackificator</literal> that attempts to move as many files as possible into Hack. It does not change the code in the file itself over to use any new features of Hack; it just changes the file headers from <literal>&lt;?php</literal> to <literal>&lt;?hh</literal> in places where such a conversion can happen cleanly. (With one exception: it marks as nullable typehinted function parameters with a null default value.)</para>
    <sect3 xml:id="install.hack.conversion.hackificator.running">
      <title>Running the hackificator</title>
      <para>To use the hackificator, first make sure you have properly <link linkend="install.hack.bootstrapping.hh_server">gotten the type checker running on your code</link> and that it reports no errors. Then, run <literal>hackificator /path/to/your/project</literal>. The tool will attempt to convert your code, file by file, to the strictest <link linkend="hack.modes">mode</link> that still produces no errors. This can take a while for projects with lots of files.</para>
    </sect3>
    <sect3 xml:id="install.hack.conversion.hackificator.notes">
      <title>Thoughts on conversion process</title>
      <para>For simple projects, this automated conversion may get good coverage. For projects making use of PHP's more dynamic features that are <link linkend="hack.unsupported">unsupported in Hack</link>, the coverage of the automated tool may not be good enough. Now is a good time to see what did and did not convert cleanly, and to see why the remaining files still in PHP mode did not convert cleanly. Facebook has found that it's often easier to address conversion problems right at the start; errors that are simple now have a way of propagating into inconsistencies that are more gnarly to untangle in the future.</para>
      <para>In particular, you should consider the difference between a <emphasis>wide</emphasis> conversion and a <emphasis>deep</emphasis> conversion. To see the difference, consider the following three files:</para>
      <para>
        <informalexample>
          <programlisting role="php">
<![CDATA[
<?php

abstract class WorkItem {
  public abstract function subclassDoWork();

  final public function beforeWork() {
    // ...
  }

  final public function run() {
    $this->beforeWork();
    $this->subclassDoWork();
  }

  // ...
}
]]>
          </programlisting>
        </informalexample>
      </para>
      <para>
        <informalexample>
          <programlisting role="php">
<![CDATA[
<?php

final class WorkItemA extends WorkItem {
  final public function subclassDoWork() {
    $this->foo = 1;
  }

  // ...
}
]]>
          </programlisting>
        </informalexample>
      </para>
      <para>
        <informalexample>
          <programlisting role="php">
<![CDATA[
<?php

final class WorkItemB extends WorkItem {
  final public function subclassDoWork() {
    $this->bar = true;
  }

  // ...
}
]]>
          </programlisting>
        </informalexample>
      </para>
      <para>If all three files are converted to Hack files, then there will be a type error. <literal>WorkItemA</literal> and <literal>WorkItemB</literal> refer to undefined member variables, <literal>$this-&gt;foo</literal> and <literal>$this-&gt;bar</literal> respectively.</para>
      <para>Other than manually diagnosing and fixing the error, there are two ways that automated tools like the hackificator can avoid producing this type error. First, it could move the <literal>WorkItem</literal> superclass into Hack, and leave <literal>WorkItemA</literal> and <literal>WorkItemB</literal> in PHP files. This is a <emphasis>deep</emphasis> conversion &#8212; since <literal>WorkItem</literal> itself was moved into a Hack file, the entire inheritance hierarchy of any other subclasses of <literal>WorkItem</literal> which also happen to convert cleanly will reside in Hack files. Since the entire inheritance hierarchy is visible, the type checker can do much more aggressive checks against all converted subclasses of <literal>WorkItem</literal>; unconverted subclasses can be fixed and converted one-by-one, reaping all the benefits of static coverage once they have been moved over to Hack files.</para>
      <para>The other way for an automated tool to reconcile this is to move <literal>WorkItemA</literal> and <literal>WorkItemB</literal> into Hack files, and leave <literal>WorkItem</literal> itself unconverted in a PHP file. Since Hack can no longer see the entire inheritance hierarchy, it will assume that the undefined members are defined in a PHP superclass, and allow both <literal>WorkItem</literal> subclasses to type check with no errors. This is a <emphasis>wide</emphasis> conversion, since many more subclasses are now in Hack files than with the other approach, and can have many checks done against them. However, the checking done is considerably less complete than if the entire hierarchy is visible to the type checker. Classes that were previously completely clean (even if <literal>WorkItem</literal> were in a Hack file too) can silently have some classes errors added to them; there is nothing enforcing that previously clean subclasses remain so.</para>
      <para>This is a tradeoff that each project will have to decide to make one way or the other. The hackificator tends to do wide conversions instead of deep ones. Since it converts files one at a time, reverting a file if it introduces an error, it is much more likely to encounter and convert a broken subclass before it encounters the superclass. Automating a deep conversion is considerably trickier and is not currently implemented in the hackificator &#8212; though for small projects that want a deep conversion converting key superclasses by hand first is likely not an unreasonable approach.</para>
      <para>Facebook did a wide conversion instead of a deep one. In our experience, having many classes "converted" but not fully checked due to a single key superclass remaining in a PHP file is a big deal. The <literal>WorkItem</literal> example above is actually a (dramatically) simplified example of this in our codebase. Our central "batched work item" superclass has over 25000 recursive subclasses, <emphasis>none</emphasis> of which can be fully checked until <emphasis>all</emphasis> of them are fully converted and the superclass moved into a Hack file &#8212; a herculean effort. We did many one-off hacks in order to get around this. For example, we defined a <literal>CrippleTypeChecking</literal> trait that does nothing except live in a PHP file; this way we can move superclasses into Hack files and just include this trait in subclasses where errors are exposed.</para>
       <para>Of course, since we <emphasis>didn't</emphasis> do a deep conversion, we don't know what the pitfalls of doing one would have been. Notably, even in the classes that aren't fully checked for things like undefined methods and undefined instance variables, the type checker still can make many other classes of useful checks, so there is massive benefit even in a wide conversion.</para>
       <para>Thus this is something each individual project should be aware of and consider whether a deep conversion, a wide conversion, or some hybrid is appropriate.</para>
    </sect3>
  </sect2>
  <sect2 xml:id="install.hack.conversion.annotations">
    <title>Inferring type annotations</title>
    <para>After moving as much code into Hack files as possible, that code is still largely going to be missing type annotations. We also provide a tool to attempt to infer parameter, return, and member variable types where possible. <emphasis>This inference is far from perfect.</emphasis> While it will always produce a set of types that are self-consistent and do not cause any type errors according to the type checker, self-consistency does not necessarily mean that they will always align with reality. This is why all the types inserted by this inference engine are "soft" types. Instead of failing hard at runtime, like a normal type annotation, they will produce a log message and continue. These log messages can be used to find and remove incorrect annotations.</para>
    <para>To add annotations, first move as much code into Hack files as possible &#8212; the more information the inference tool has access to, the better it will do, and the more consistency it can ensure. Then, run <literal>hh_server --convert directory-to-add-annotations project-root</literal>. This checks <literal>project-root</literal> for consistency, adding annotations only in the subdirectory <literal>directory-to-add-annotations</literal> while keeping the entire project clear of errors. Again, since the tool works best when it can see and modify as much of the code as possible, making <literal>directory-to-add-annotations</literal> the same as <literal>project-root</literal> (or as close to it as possible) is likely to lead to the best results.</para>
    <para>Since this inference process is holistic, it is considerably more resource intensive than the hackificator, which can operate on a single file at a time. It scales well enough to run on all of Facebook's library code all at once &#8212; tens of millions of lines of code &#8212; though it takes about half a day and 10 GB of RAM. Most projects will be of <emphasis>dramatically</emphasis> smaller scale than that and are expected to have no problems. For larger projects, RAM is more of a limiting factor than CPU, since parts of the process are unfortunately inherently serial. (Though more cores of course help and will be used when possible!)</para>
  </sect2>
  <sect2 xml:id="install.hack.conversion.cleanup">
    <title>Hardening type annotations</title>
    <para>Once annotations have been added, the logs from the "soft" failures can be automatically parsed to remove the annotations that mismatch at runtime, and to turn the annotations that match into hard failures. Good places to collect such logs include unit test runs and even from production.</para>
    <para>To parse a logfile and remove the annotations it is complaining about, use <literal>hack_remove_soft_types --delete-from-log your-log.log</literal>. Keep in mind that this tool is fairly unintelligent; it uses regular expressions to grab certain key parts of the log, including the file path to modify. If your log was generated on a machine where its PHP code lives in a different location than your development environment, you may want to use <literal>sed</literal> or a similar tool to correct the paths before running <literal>hack_remove_soft_types</literal>.</para>
    <para>Finally, once all annotations are known to be correct, <literal>hack_remove_soft_types --harden file.php</literal> will turn all annotations in that file into hard failures. This currently works file-at-a-time, so you may want something like <literal>find dir -type f -name '*.php' -exec hack_remove_soft_types --harden '{}' ';'</literal> to harden every file in a directory.</para>
  </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
