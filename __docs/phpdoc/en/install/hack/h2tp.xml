<?xml version="1.0" encoding="utf-8"?>
<sect1 xml:id="install.hack.h2tp" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>The Hack Transpiler</title>
  <para>
    The Hack transpiler (or <literal>h2tp</literal>) provides a PHP 5.4+
    compatibility mechanism for code that has been either converted from PHP
    to Hack or originally written in Hack. <literal>h2tp</literal> is a
    command line tool that transpiles your Hack code into PHP and then uses
    a class and function library to help that transpiled code run on a
    PHP 5.4+ engine (which engine is very dependent on the functionality your
    code uses).
  </para>
  <para>
    The intended use case for the Hack transpiler is to be able to convert
    your code to Hack and the richness of types and functionality it offers, but
    also ensure that customers of your code that have not yet converted to HHVM
    are still able to seamlessly continue to operate successfully.
  </para>
  <para>
    <literal>h2tp</literal> excels as a final build step for a project to make
    a backwards-compatible release. Ideally, a project will convert to Hack,
    have its source of truth be in Hack and then only run
    <literal>h2tp</literal> as a final build step to create an alternate
    version of a release.
  </para>
  <sect2 xml:id="install.hack.h2tp.prerequisites">
    <title>Prerequisites</title>
    <para>
      The Hack transpiler has the following prerequistes:
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">HHVM</emphasis>:
            <literal>h2tp</literal> is available in the
            <link xlink:href="&url.hhvm.install.prebuilt;">nightly-build
            </link> of <link xlink:href="&url.hhvm;">HHVM</link> as of 11 November 2014 and will be standard starting in HHVM 3.5. <literal>h2tp</literal> will be located in
            <literal>/usr/bin/</literal> by default.
          </para>
        </listitem>
        <listitem>
          <para>
          <emphasis role="bold">$GLOBALS['HACKLIB_ROOT']</emphasis>: The Hack
          transpiler requires a Hack-specific library called "hacklib.php"
          that is used on the transpiled code when it is run on a PHP 5.x
          engine.
          <literal>$GLOBALS['HACKLIB_ROOT']</literal>
          should be set to the location of
          <literal>hacklib.php</literal>,
          which could be the default location of
          <literal>/usr/share/hhvm/hack/hacklib/hacklib.php</literal>
          or, if you decide to move the library to, for example, the root of
          your project directory, then it should be set there.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">A minimum version of PHP 5.x</emphasis>: Hack
            transpiled code runs, by default, on PHP 5.4 or greater. However, if
            your project uses features that are only available in, for example,
            PHP 5.6 (e.g., the <literal>splat</literal> operator), then the
            transpiled code will only run on PHP 5.6+. This prerequisite serves
            mainly as reminder to project owners using
            <literal>h2tp</literal> to be aware of where the transpiled code
            will actually run.
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </sect2>
  <sect2 xml:id="install.hack.h2tp.usage">
    <title>Usage</title>
    <para>
      Once the prerequistes are fulfilled, the usage of <literal>h2tp</literal>
      is generally straightforward. Run the following command:
      <informalexample>
        <programlisting role="bash">
<![CDATA[
h2tp <path_to_input_directory> <path_to_transpiled_code_output_directory>
]]>
        </programlisting>
      </informalexample>
    </para>
  </sect2>
  <sect2 xml:id="install.hack.h2tp.example">
    <title>Example</title>
    <para>
      Here is an example of transpiling Hack code to PHP usable by a PHP 5.4+
      engine.
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh
class Alice extends Person {
  private int $height = 62;
  private ?Vector<Person> $siblings;
  public function transform(Transformable $item) : this {
    if ($item instanceof Potion) {
      $this->height = 10;
    }
    return $this;
  }
}
function wonderland(Transformable $drinkMe) {
  $eatMe = getFood();
  $transform = ($alice) ==> $alice->transform($drinkMe)->transform($eatMe);
}
]]>
        </programlisting>
        <para>
          The transpiler outputs:
        </para>
        <programlisting role="php">
<![CDATA[
<?php
class Alice extends Person {
  private $height = 62;
  private $siblings;
  public function transform($item) {
    if ($item instanceof Potion) {
      $this->height = 10;
    }
    return $this;
  }
}
function wonderland($drinkMe) {
  $eatMe = getFood();
  $transform = function ($alice) use ($eatMe, $drinkMe) {
    return $alice->transform($drinkMe)->transform($eatMe);
  };
}
]]>
        </programlisting>
      </informalexample>
      The above example shows how Hack-only type annotations (e.g, the
      <literal>this</literal> return type) and Hack-specific syntax (e.g., the
      lambda shorthand syntax) are removed in the transpiled code. The
      transpiled code is now able to be run on a PHP 5.4+ engine.
    </para>
  </sect2>
  <sect2 xml:id="install.hack.h2tp.hacklib">
    <title>Hacklib</title>
    <para>
      Supporting the <link linkend="hack.collections">collections</link>
      library turned out to be a tricky proposition. For example, arrays in
      PHP have value semantics rather than reference semantics as with Hack
      collections.
    </para>
    <para>
      The library provided with the Hack transpiler
      <literal>hacklib.php</literal> actually provides the full implementation
      of the entire Hack collections library. This is not a programmer-usable
      library per-se (actually, trying to use the library on its own is
      definitely not supported). However, the library does allow the
      transpiler to generate code that does not require violating the
      semantics provided by collections.
    </para>
    <para>
      <literal>hacklib.php</literal> also provides convenience functions that
      are used in transpiled code to ensure appropriate casts are made when
      necessary. For example, you may see transpiled code like this:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
function chopHead($subject) {
  if (!\hacklib_cast_as_boolean($subject->isQueen())) {
     $subject->removeHead();
  }
}
]]>
        </programlisting>
        <para>
          <literal>isQueen</literal> could return a collection, for example,
          which, in Hack, converts to <literal>false</literal>. So we needed
          to make sure those semantics remained.
        </para>
      </informalexample>
    </para>
  </sect2>
  <sect2 xml:id="install.hack.h2tp.caveats">
    <title>Caveats and Unsupported Features</title>
    <sect3 xml:id="install.hack.h2tp.caveats.unsupported">
      <title>Unsupported Features</title>
      <para>
        The primary goal of the Hack transpiler is to ensure that transpiled code
        would behave <emphasis role="strong">exactly</emphasis> the same as the
        original. However, there is a list of constructs that the transpiler does
        not support.
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="hack.async">async</link> functions and
              <link linkend="hack.async.asyncawait">await</link> expressions
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="hack.attributes.memoize">__Memoize</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="hack.traits.requirements">Traits implementing
              interfaces</link>
            </para>
          </listitem>
          <listitem>
            <para>
            Instance variables using literal syntax in the class declaration
            (however, there is support for static variables and default
            parameters).
            <informalexample>
              <programlisting role="php">
  <![CDATA[
  <?hh
  class Blah {
    private static Vector<string> $v1 = Vector {}; // This is supported
    private Vector<string> $v2 = Vector {}; // This is not supported
  }
  ]]>
              </programlisting>
            </informalexample>
          </para>
          </listitem>
          <listitem>
            <para>
              Hack
              <literal><link linkend="hack.modes.decl">// decl</link></literal>
              or PHP files. The code being transpiled must be checkable by the
              <link linkend="install.hack.bootstrapping">Hack type checker</link>.
          </para>
          </listitem>
        </itemizedlist>
      </para>
    </sect3>
    <sect3 xml:id="install.hack.h2tp.caveats.codegen">
      <title>Generated Code</title>
      <para>
        The transpiled code is machine-generated; while it's close enough to the
        original source that investigating bug reports filed by people using it
        won't be a problem, it's also not something intended to be manually
        edited, or for edits to be preserved in any way.
      </para>
    </sect3>
    <sect3 xml:id="install.hack.h2tp.caveats.collectionsswitchcase">
      <title>Collections in Switch/Case Statements</title>
      <para>
        Collections in <literal>switch case</literal> statements do not behave
        correctly. <literal>switch case</literal> invokes
        <literal>==</literal> which <literal>h2tp</literal> transforms convert
        into a function call in the hacklib library. It turns out that if we
        want to handle <literal>switch</literal> we would have to transform
        every single <literal>switch</literal> statement. Thus, at this point,
        it seems better to not support this construct.
      </para>
    </sect3>
  </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
