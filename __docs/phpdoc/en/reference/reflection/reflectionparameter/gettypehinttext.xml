<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 330252 $ -->

<refentry xml:id="reflectionparameter.gettypehinttext" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ReflectionParameter::getTypehintText</refname>
  <refpurpose>Returns the typehint.</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>string</type><methodname>ReflectionParameter::getTypehintText</methodname>
   <void />
  </methodsynopsis>
  <para>
    Returns the typehint of a parameter.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the typehint of a parameter.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>A <function>ReflectionParameter::getTypehintText</function> 
    example</title>
    <programlisting role="php">
<![CDATA[
<?hh
function f(string $s) {
  /* ... */
}

$reflection_function = new ReflectionFunction('f');
$reflection_parameter = $reflection_function->getParameters()[0];
var_dump($reflection_parameter->getTypehintText());
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(3) "HH\string"
]]>
    </screen>
   </example>

   <example>
    <title><function>ReflectionParameter::getTypehintText</function> 
    with soft types, nullables and generic types.</title>
    <warning>
      <para>
      As opposed to <function>ReflectionParameter::getTypeText</function>
      <function>ReflectionParameter::getTypehintText</function> does not work with
      <link linkend="install.hack.conversion">soft types</link>, <link linkend="hack.nullable">nullable types</link>
      or <link linkend="hack.generics">generic types</link>
      </para>
    </warning>
    <programlisting role="php">
<![CDATA[
<?hh
class X<T>{
    public function m(T $a, int $b){}
}
function f(?int $one, @int $two, int $three) {}


echo "Testing getTypehintText() on f(): \n";
$r = new ReflectionFunction('f');
foreach ($r->getParameters() as $p) {
  echo "Parameter $".$p->getName().": ";
  var_dump($p->getTypehintText());
}

echo "\n";

echo "Testing getTypehintText() on X::m(): \n";
$r = new ReflectionMethod('X::m');
foreach ($r->getParameters() as $p) {
  echo "Parameter $".$p->getName().": ";
  var_dump($p->getTypehintText());
}
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Testing getTypehintText() on f(): 
Parameter $one: string(0) "" 
Parameter $two: string(0) "" 
Parameter $three: string(6) "HH\int" 

Testing getTypehintText() on X::m(): 
Parameter $a: string(0) "" 
Parameter $b: string(6) "HH\int"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ReflectionParameter::getTypeText</function></member>
    <member><function>ReflectionProperty::getTypeText</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
