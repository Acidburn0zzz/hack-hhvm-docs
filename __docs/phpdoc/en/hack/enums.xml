<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="hack.enums">
  <title>Enums</title>
  <para>
    Hack supports first-class enumerations (enums). An enum is a distinct type
    that consists of a set of name constants, generally called the enumerator
    list.
  </para>
  <para>
    Before first-class enums were available, the workaround to emulate an enum
    went something like this:
    <informalexample>
      <programlisting role="php">
<![CDATA[
<?php

abstract class DayOfWeek {
  const Sunday = 0;
  const Monday = 1;
  const Tuesday = 2;
  const Wednesday = 3;
  const Thursday = 4;
  const Friday = 5;
  const Saturday = 6;
}

function foo() {
  return DayOfWeek::Wednesday; // returns a 3
}
]]>
      </programlisting>
      <para>
        Class constants would generally be used to mimic enumerations. Or, with
        Hack before first-class enums, <literal>
        <link linkend="hack.typealiasing.examples">newtype</link></literal>
        could be used as well.
      </para>
    </informalexample>
  </para>
  <para>
    With first-class enums, declarations and usage are as familiar as other
    languages.
    <informalexample>
      <programlisting role="php">
<![CDATA[
<?hh

enum DayOfWeek: int {
  Sunday = 0;
  Monday = 1;
  Tuesday = 2;
  Wednesday = 3;
  Thursday = 4;
  Friday = 5;
  Saturday = 6;
}

function foo(): DayOfWeek {
  return DayOfWeek::Wednesday; // returns a 3
}
]]>
      </programlisting>
    </informalexample>
  </para>
  <para>
    Enum names can be used as a <link linkend="hack.annotations">type
    hint</link>, they are checked by the <link linkend="hack.intro.whatis">Hack
    type checker</link> and can be <literal>
    <link linkend="control-structures.switch">switch</link></literal>ed upon.
  </para>

  <sect1 xml:id="hack.enums.details">
    <title>Enums Details</title>
    <para>
      Enumerations are declared like:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

enum Foo: int {
  FOO = 1;
  BAR = 2;
  BAZ = 3;
}
]]>
        </programlisting>
        <para>
          This creates a new type <literal>Foo</literal>, represented by
          <literal>int</literal> values. The enum constants
          (e.g. <literal>Foo::FOO</literal>) are of type <literal>Foo</literal>.
        </para>
        <para>
          <literal>Foo</literal> is a type and can be used as a type hint.
          <programlisting>
<![CDATA[
<?hh

function foo(): Foo {
  return Foo::BAR;
}
]]>
          </programlisting>
        </para>
      </informalexample>
    </para>
    <para>
      In the example above, although <literal>Foo</literal> values are integers,
      <literal>Foo</literal> is a distinct type from <literal>int</literal>.
      That means one <emphasis>cannot</emphasis> be used where the other is
      expected.
    </para>
    <para>
      To use <literal>Foo</literal> constants where <literal>int</literal> is
      expected, you have to use <link linkend="hack.generics.constraints">
      constraints</link>.
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

enum Foo: int as int{
  FOO = 1;
  BAR = 2;
  BAZ = 3;
}
]]>
        </programlisting>
        <para>
          This makes <literal>Foo</literal> a subtype of <literal>int</literal>,
          where this would work:
          <programlisting role="php">
<![CDATA[
<?hh

function foo(int $x): void {}
foo(Foo::BAR);
]]>
          </programlisting>
        </para>
        <para>
          ...but this would not work:
          <programlisting role="php">
<![CDATA[
<?hh

function foo(FOO $x): void {}
foo(3);
]]>
          </programlisting>
        </para>
      </informalexample>
    </para>
  </sect1>

  <sect1 xml:id="hack.enums.functions">
    <title>Enum Functions</title>
    <para>
      All declared enums have a set of pre-defined functions available to them:
      <simplelist>
        <member><function>Enum::assert</function></member>
        <member><function>Enum::assertAll</function></member>
        <member><function>Enum::coerce</function></member>
        <member><function>Enum::getNames</function></member>
        <member><function>Enum::getValues</function></member>
        <member><function>Enum::isValid</function></member>
      </simplelist>
    </para>
  </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
