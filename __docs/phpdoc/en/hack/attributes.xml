<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="hack.attributes">
  <title>Attributes</title>
  <para>
    Attributes in Hack provide the ability to give any
    <link linkend="intro.reflection">reflectable</link> piece of code
    additional contextual information. For example, attributes can be used to
    declare a function a test method or provide versioning information on a
    class.
  </para>
  <para>
    Attributes are declarative tags of the form <literal>
    &lt;&lt;Attribute&gt;&gt;</literal>. To specify a value for an attribute,
    use parenthesis <literal>(value)</literal>. Multiple attributes can be
    declared using a <literal>,</literal>; e.g. <literal>
    &lt;&lt;Attribute1, Attribute2&gt;&gt;</literal>.
  </para>
  <para>
    The value of an attribute can be accessed using the <literal>
    Reflection::getAttribute(string $name)</literal> method. The full attribute
    information for any reflectable item can be accessed via <literal>
    Reflection::getAttributes()</literal>
  </para>
  <note>
    <para>
      There are special attributes provided directly by Hack that have special
      meaning to the Hack type checker and HHVM. These special attributes are
      prefixed by a double underscore (<literal>__</literal>). This is to
      signify that the custom attribute has meaning to the HHVM compiler rather
      than just user space decoration. It is analogous to the underscores on
      <literal>__call()</literal> hinting that it is special.
    </para>
  </note>
  <para>
    Here is an example of the use of attributes:
    <informalexample>
      <programlisting role="php" location="hack.attributes1.php" />
      <informalexample>
        &example.outputs;
        <screen>
<![CDATA[
array(2) {
  ["TestFunction"]=>
  array(0) {
  }
  ["key"]=>
  array(1) {
    [0]=>
    string(1) "6"
  }
}
array(1) {
  [0]=>
  string(1) "6"
}
]]>
        </screen>
      </informalexample>
      <para>
        The class <literal>Foo</literal> has one function <literal>bar()
        </literal> that has two attributes associated with it. And <literal>
        getAttributes()</literal> gives an array of those attributes. And
        <literal>getAttribute("key")</literal> gives an array of the values of
        the <literal>key</literal> which, in this case, is <literal>6</literal>.
      </para>
    </informalexample>
  </para>
  <sect1 xml:id="hack.attributes.override">
    <title>__Override Special Attribute</title>
    <warning>
      <para>
        Before HHVM 3.4, this special attribute was named
        <literal>Override </literal> without the double underscores
        <literal>__</literal>. However, we are making a change where all
        special, "magical" attributes that have real meaning to the Hack type
        checker and/or HHVM must be prefixed by <literal>__</literal>. Using
        <literal>Override</literal> will not cause any runtime problems, but
        from HHVM 3.4 and beyond, it would be treated just as any normal user
        attribute. To ensure a proper migration path, one options is to use
        both attributes, such as
        <literal>&lt;&lt;__Override, Override&gt;&gt;</literal>.
      </para>
    </warning>
    <para>
      The <literal>__Override</literal> attribute is the child class' counterpart
      to the parent class' <literal>abstract</literal> declaration. It is an
      optional annotation on a method, implemented with the
      <literal>&lt;&lt;__Override&gt;&gt;</literal> user attribute. If the
      <literal>&lt;&lt;__Override&gt;&gt;</literal> attribute is found on a
      method, and that method does not exist in the set of (non-interface)
      methods inherited from parents, an error is thrown. In Hack partial mode,
      this has the effect of throwing when the parent is defined in PHP, since
      the type checker cannot access the parent's method declarations.
      Consider the following:
      <informalexample>
        <programlisting role="php" location="hack.attributes2.php" />
        <para>
          If the parent class is (inadvertently) refactored to the following...
        </para>
        <programlisting role="php" location="hack.attributes3.php" />
        <para>
        ... the <literal>&lt;&lt;__Override&gt;&gt;</literal> annotation will
        result in a type checker error, alerting the refactorer of
        <literal>CParent</literal> of the existence of <literal>Child</literal>.
        </para>
      </informalexample>
    </para>
    <sect2 xml:id="hack.attributes.override.traits">
      <title>In Traits</title>
      <para>
        The <literal>&lt;&lt;__Override&gt;&gt;</literal> annotation may also be
        added to trait methods, although with slightly different behavior than
        in standard classes. For trait methods annotated with
        <literal>&lt;&lt;__Override&gt;&gt;</literal>, the check of whether the
        overridden method exists is deferred to the classes that
        <literal>use</literal> the trait.
        <informalexample>
          <programlisting role="php" location="hack.attributes4.php" />
        </informalexample>
      </para>
    </sect2>
  </sect1>
  <sect1 xml:id="hack.attributes.memoize">
    <title>__Memoize Special Attribute</title>
    <para>
      As of HHVM 3.3, the <literal>__Memoize</literal> attribute allows
      functions to cache their results, without having to explicitly define
      custom caching mechanisms. An example is the best way to illustrate
      <literal>__Memoize</literal>. Formerly, caching was done in this sort of
      manner:
      <informalexample>
        <programlisting role="php" location="hack.attributes5.php" />
        <para>
          This code employs an explicit caching mechanism to avoid possibly
          expensive function calls.
        </para>
      </informalexample>
    </para>
    <para>
      Now see how much simpler and succinct <literal>__Memoize</literal> makes
      the code above:
      <informalexample>
        <programlisting role="php" location="hack.attributes6.php" />
        <para>
          After the first call to <literal>bar()</literal>, the result will be
          automatically cached so that subsequent calls to
          <literal>bar()</literal> will not result in a potentially expensive
          call to <literal>function_that_returns_baz()</literal>.
        </para>
      </informalexample>
    </para>
    <para>
      <literal>__Memoize</literal> can be used on any type of function (e.g.
      <literal><link linkend="hack.async">async</link></literal>, <literal>
      static</literal>, <literal>top-level</literal>, etc.), with any
      number of arguments. The limitations are:
      <simplelist>
        <member>The arguments must be explicit (i.e., no varargs).</member>
        <member>The arguments cannot be passed by reference.</member>
        <member>The supported argument types are <literal>null</literal>,
        <literal>bool</literal>, <literal>int</literal>,
        <literal>float</literal>, <literal>string</literal>, any object
        implementing the <literal>IMemoizeParam</literal> interface, and arrays/
        collections containing any supported argument type.</member>
      </simplelist>
    </para>
    <note>
      <para>
        <literal>__Memoize</literal> applies to the specific function on which
        it is applied. It is not applied to other named functions in its class
        hierarchy. Here is an example:
        <informalexample>
          <programlisting role="php" location="hack.attributes7.php" />
        </informalexample>
      </para>
    </note>
    <warning>
      <para>
        Do not abuse the use of <literal>__Memoize</literal>. It might be tempting
        to memoize everything, but remember that the cost of memoizing is
        increased memory usage. Proper use of <literal>__Memoize</literal>,
        though, can possibly increase performance with a minimal increase in
        memory overhead. A good rule of thumb is that if you wouldn't take the
        time to write caching code manually if <literal>__Memoize</literal>
        didn't exist, then don't use <literal>__Memoize</literal>.
      </para>
    </warning>
  </sect1>
  <sect1 xml:id="hack.attributes.consistentconstruct">
    <title>__ConsistentConstruct Special Attribute</title>
    <para>
      As of HHVM 3.4, the <literal>__ConsistentConstruct</literal> attribute
      provides the Hack type checker a signal to ensure all
      <literal>__construct()</literal> definitions for all subclasses of a
      parent class <literal>Foo</literal> are compatible with the
      <literal>__construct() </literal> of <literal>Foo</literal>.
    </para>
    <para>
      This attribute is useful particularly for <literal>new static()</literal>
      calls. Consider this example and the output of the Hack type checker:
      <informalexample>
        <programlisting role="php" location="hack.attributes8.php" />
        &example.outputs;
        <screen>
<![CDATA[
File "cc.php", line 4, characters 12-23:
Can't use new static() for Foo; __construct arguments are not guaranteed to be consistent in child classes (Typing[4060])
File "cc.php", line 2, characters 7-12:
This declaration neither defines an abstract/final __construct nor uses <<__ConsistentConstruct>> attribute
]]>
        </screen>
        <para>
          This code is also going to fail at runtime because the call to
          <literal>make()</literal> in <literal>Foo</literal> doesn't provide
          the required <literal>A</literal> parameter necessary to construct
          <literal>ChildOfFoo</literal>.
        </para>
      </informalexample>
      <note>
        <para>
          This example uses
          <link linkend="hack.constructorargumentpromotion">Constructor
          Argument Promotion</link> in the constructor of
          <literal>Child</literal>.
        </para>
      </note>
    </para>
    <para>
      Now, if we use the <literal>__ConsistentConstruct</literal> attribute,
      the Hack type checker can make sure everything is aligned with the parent
      and children constructors:
      <informalexample>
        <programlisting role="php" location="hack.attributes9.php" />
        &example.outputs;
        <screen>
<![CDATA[
File "cc.php", line 8, characters 7-11:
This object is of type ChildOfFoo (Typing[4041])
File "cc.php", line 8, characters 21-26:
It is incompatible with this object of type Foo
because some of their methods are incompatible.
Read the following to see why:
File "cc.php", line 9, characters 19-29:
Too many mandatory arguments
File "cc.php", line 3, characters 7-12:
Because of this definition
]]>
        </screen>
      </informalexample>
    </para>
    <para>
      Finally, if we use the <literal>__ConsistentConstruct</literal> attribute,
      and the code is correct, the Hack type checker should be happy:
      <informalexample>
        <programlisting role="php" location="hack.attributes10.php" />
        &example.outputs;
        <screen>
<![CDATA[
No errors
]]>
        </screen>
      </informalexample>
    </para>
    <note>
      <para>
        If you want a child class not to follow the <literal>
        __ConsistentConstruct</literal> behavior, you can mark the <literal>
        __construct()</literal> of that child class
        <literal>&lt;&lt;UNSAFE_Construct&gt;&gt;</literal>. Keep in mind that
        this attribute is very similar to the
        <link linkend="hack.modes.unsafe"><literal>UNSAFE</literal>
        </link> annotation that basically tells the Hack type checker to
        "trust" that the programmer knows what he/she is doing and ignore this
        piece of code.
      </para>
    </note>
  </sect1>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
