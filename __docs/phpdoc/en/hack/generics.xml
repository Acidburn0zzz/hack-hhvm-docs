<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="hack.generics">
  <title>Generics</title>
  <para>
    Hack introduces generics to PHP (in the same vein as statically type languages such as C# and Java). Generics allow classes and methods to be parameterized (i.e., a type associated when a class is instantiated or a method is called). Here is an example:
    <informalexample>
      <programlisting role="php">
<![CDATA[
<?hh
class Box<T> {
  protected T $data;

  public function __construct(T $data) {
    $this->data = $data;
  }

  public function getData(): T {
    return $this->data;
  }
}
]]>
      </programlisting>
    </informalexample>
  </para>
  <para>
    The <literal>Box</literal> class has a generic type parameter, <literal>T</literal>, associated with it.
    For any instance of <literal>Box</literal>, <literal>T</literal> can be given any available type. In addition, the method <literal>getData()</literal> returns a <literal>T</literal>, meaning that the
    method will return the same type as associated with <literal>Box</literal> at instantiation. Note, though,
    that the <literal>getData()</literal> method is not itself generic; it is just accessing the top-level type parameter of <literal>Box</literal>. A client use of <literal>Box</literal> would look like the following:
    <informalexample>
      <programlisting role="php">
<![CDATA[
<?hh

function main_gen() {
  $gi = new Box(3);
  $gs = new Box("Hi");
  $ga = new Box(array());
  echo $gi->getData()."\n";
  echo $gs->getData()."\n";
  echo $ga->getData()."\n";
}

main_gen();
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
3
Hi
Array
]]>
      </screen>
    </informalexample>
  </para>
  <para>
    Parameterization of a class or method provides the following, related, benefits:
    <itemizedlist>
      <listitem>
        <para>
          Generics code can be statically checked (in this case using the Hack type checker). Otherwise, without generics, to achieve code like adding similarly-typed items to a list, there would have to be <literal>instanceof</literal> checks and casting at runtime.
        </para>
      </listitem>
      <listitem>
        <para>
          Clients of generics code can (currently through inference) specify the particular data type to be used, making code more readable and maintainable.
        </para>
      </listitem>
    </itemizedlist>
  </para>
  <note>
    <para>
      HHVM allows syntax such as <literal>$x = Vector&lt;int&gt;{5,10};</literal>, but Hack disallows the <literal>&lt;int&gt;</literal> syntax in this situation, instead opting to infer it.
    </para>
  </note>

  <sect1 xml:id="hack.generics.introexample">
    <title>Introductory Example</title>
    <para>
      An example of a generic class is <literal>Vector&lt;T&gt;</literal>, from the Hack collections implementation. The <literal>T</literal> is what makes <literal>Vector</literal> generic, as it can hold any type of object, from <literal>int</literal> to a user-defined class. However, for any instantiation of the class, once a type has been associated with <literal>T</literal>, it cannot hold any other type.
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh
/* Signature of Vector
*
* class Vector<Tv> implements MutableCollection<Tv> {
* :
* }
*
*/

function main_vec() {
  $x = Vector {1, 2, 3, 4}; // T is associated with int
  $y = Vector {'a', 'b', 'c', 'd'}; // T is associated with string
}

main_vec();
]]>
        </programlisting>
        <para>
          <literal>$x</literal> is a <literal>Vector&lt;int&gt;</literal>, while <literal>$y</literal> is a <literal>Vector&lt;string&gt;</literal>. A <literal>Vector&lt;int&gt;</literal> and <literal>Vector&lt;string&gt;</literal> are not the same type. Methods can also be generic, even when the class is not. Normally, the situation is to have a generic class with non-generic methods or a non-generic class with generic methods. While it is possible, having a generic class with generic methods is usually the exception more than the rule. Having both a generic class and a generic method in that class might be useful when the method is something like a compare method and the generic type parameter to the method is thus different than the class. Here is a contrived example of a generic method in a non-generic class:
        </para>
        <programlisting role="php">
<![CDATA[
<?hh

// Testing generic methods in a non-generic class.

class Box<T> {
  public T $value;
  public function __construct(T $v) {
    $this->value = $v;
  }
}

class FooGenMethod {
  public function swap<T>(Box<T> $a, Box<T> $b) : void {
    $temp = $a->value;
    $a->value = $b->value;
    $b->value = $temp;
  }
}

function main_genmeth() {
  $f = new FooGenMethod();
  $y = new Box(3);
  $z = new Box(4);
  echo $y->value." ".$z->value;
  $f->swap($y, $z);
  echo $y->value." ".$z->value;
}

main_genmeth();
]]>
        </programlisting>
        <para>
          The above example shows a generic method <literal>swap&lt;T&gt;()</literal> in a non-generic class <literal>FooGenMethod</literal>.
        </para>
        <note>
          <para>
            Notice that in the <literal>swap&lt;T&gt;()</literal> method, an object was used instead of a primitive for the parameter. This is because <link linkend="hack.annotations.passingbyreference">references to primitives are not typed</link> (e.g., <literal>int &amp;a</literal>).
          </para>
        </note>
      </informalexample>
    </para>
    <para>
      Generics allow developers to write one class or method with the ability to be parameterized to any type, all while preserving type safety. Without a generics paradigm, to accomplish a similar model would require treating everything as a top-level object, many <literal>instanceof()</literal> checks, and casts to the appropriate type.
    </para>
  </sect1>

  <sect1 xml:id="hack.generics.class">
    <title>Writing a Generic Class</title>
    <para>
      When writing a generic class, keep the following guidelines in mind:
      <itemizedlist>
        <listitem>
          <para>
            The generic parameter must start with a capital letter <literal>T</literal>. </para>
        </listitem>
        <listitem>
          <para>
            The generic class must not collide with any existing, non-generic class name (i.e, <literal>class Vec</literal> and <literal>class Vec&lt;T&gt;</literal>).
          </para>
        </listitem>
        <listitem>
          <para>
            Inside the generic class, <literal>T</literal> can be referred to in class method arguments as well as the return type. </para>
        </listitem>
        <listitem>
          <para>
            Nullable T is supported (i.e., <literal>?T</literal>).
          </para>
        </listitem>
        <listitem>
          <para>
            Hack does not currently support casting to <literal>T</literal> or creating new instances of <literal>T</literal>.
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      Here is an example of a generic class:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

// The mailbox can contain any type, but, per instantiation, once associated
// with a type, it cannot change. Mailbox<int>, Mailbox<string>, Mailbox<mixed>
class Mailbox<T> {
  private ?T $data;

  public function __construct() {
    $this->data = null;
  }

  public function put(T $mail): void {
    $this->data = $mail;
  }

  public function check(): ?T {
    if ($this->data !== null) {
      return $this->data;
    }
    return null;
  }
}
]]>
        </programlisting>
      </informalexample>
    </para>
  </sect1>

  <sect1 xml:id="hack.generics.traitsandinterfaces">
    <title>Writing a Generic Trait and Interface</title>
    <para>
      Like classes, traits and interfaces can be generic as well. The guidelines are similar to that of classes. Here is an example:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh
// Copyright 2004-present Facebook. All Rights Reserved.

// generic interface
interface Box<T> {
  public function add(T $item): void;
  public function remove(): T;
}

// generic trait
trait Commerce<T> {
  public function buy(T $item): void {
    echo 'Bought a '.get_class($item)."\n";
  }

  public function sell(T $item): void {
    echo 'Sold a '.get_class($item)."\n";
  }
}

// generic class that uses generic trait and implements generic interface
class BestBuy<T> implements Box<T> {
  protected Vector<T> $vec;
  private int $last;

  public function __construct() {
    $this->vec = Vector{};
    $this->last = -1;
  }

  use Commerce<T>;

  public function add(T $item): void {
    $this->vec->add($item);
    $this->last++;
  }

  public function remove(): T {
    $item = $this->vec->at($this->last);
    $this->vec->removeKey($this->last--);
    return $item;
  }
}

// For example purposes
abstract class Computer {}
class Apple extends Computer{}
class Lenovo extends Computer {}
class Dell extends Computer {}

function main_gti() {
  $store = new BestBuy();
  $store->add(new Lenovo());
  $store->add(new Apple());
  $store->add(new Dell());
  echo get_class($store->remove())."\n";
  $store->sell($store->remove());
}

main_gti();
]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
Dell
Sold a Apple
]]>
        </screen>
      </informalexample>
    </para>
  </sect1>

  <sect1 xml:id="hack.generics.method">
    <title>Writing a Generic Method</title>
    <para>
      When writing a generic method, keep the following guidelines in mind:
      <itemizedlist>
        <listitem>
          <para>
            The generic parameter must start with a capital letter <literal>T</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            The generic method must not collide with any existing, non-generic method name (i.e, <literal>public function swap</literal> and <literal>public function swap&lt;T&gt;</literal>).
          </para>
        </listitem>
        <listitem>
          <para>
            Inside the generic method, <literal>T</literal> can be referred to for the return type. </para>
        </listitem>
        <listitem>
          <para>
            Nullable T is supported (i.e., <literal>?T</literal>). </para>
        </listitem>
        <listitem>
          <para>
            Hack does not currently support for casting to <literal>T</literal> or creating new instances of <literal>T</literal>.
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      Here is an example of a generic method:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

class FooGenMethod {
  public function swap<T>(Box<T> $a, Box<T> $b) : T {
    $temp = $a->value;
    $a->value = $b->value;
    $b->value = $temp;
    return $temp;
  }
}
]]>
        </programlisting>
      </informalexample>
    </para>
  </sect1>

  <sect1 xml:id="hack.generics.typeinference">
    <title>Generics and Type Inference</title>
    <para>
      Generics may have some surprising semantics when it comes to type inference. This code example will be used to discuss how generics and type inference are handled within Hack.
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh // strict

class A {}
class Z extends A {}

function foo_gi(): void {
  $x = Vector {};
  $x->add(new A());
  $x->add(new Z());
}

function foo_gi2(): void {
  $x = Vector {};
  $x->add(new Z());
  $x->add(new A());
  foo_gi4($x);
}

function foo_gi3(bool $b): void {
  $x = Vector {};
  $x->add(new Z());
  $x->add(new A());
  foo_gi5($x);
}

function foo_gi4(Vector<Z> $vec): void {}
function foo_gi5(Vector<A> $vec): void {}
function foo_gi6(Vector<mixed> $vec): void {}
]]>
        </programlisting>
        <para>
          As probably expected, Hack allows an element of type <literal>Z</literal> to be added to a <literal>Vector&lt;A&gt;</literal>. Possibly surprisingly, the reverse is also true &#8212; to a point. Some programming languages require the type of the associated with the generic class be known at instantiation time. Hack, on the other hand, can begin determining the type of the generic upon first usage.
        </para>
        <para>
          In function <literal>foo_gi2()</literal>, a new, empty <literal>Vector</literal> is assigned to <literal>$x</literal>. However, since the <literal>Vector</literal> was empty, the type associated with <literal>$x</literal> was not declared. After the first call to <literal>$x->add()</literal>, the type association for <literal>$x</literal> begins. Now the type associated with <literal>$x</literal> is still unresolved, but allows a <literal>Z</literal>. After the second call to <literal>$x->add()</literal>, the type association is still unresolved, but allows a <literal>Z</literal> or an <literal>A</literal>. For all intents and purposes, at this point <literal>$x</literal> is a <literal>Vector&lt;Unresolved[Z, A]&gt;</literal>.
        </para>
        <para>
          After the <literal>->add()</literal>s are completed, that is when things get interesting. Once we start exposing this created <literal>Vector</literal> to the outside world, either by a method/function call or returning from a method/function, the <literal>Vector</literal> becomes type established. Effectively, <literal>$x</literal> is now a <literal>Vector&lt;mixed&gt;</literal>, but with inheritance properties. Calling <literal>foo_gi4($x)</literal> becomes problematic to the type checker. <literal>foo_gi4()</literal> takes a <literal>Vector&lt;Z&gt;</literal>. However, <literal>$x</literal> has an <literal>A</literal> in it; at this point, <literal>$x</literal> cannot have an element that is a parent of <literal>Z</literal>.
        </para>
        <para>
          Calling <literal>foo_gi5($x)</literal> would not cause a type checker error since <literal>foo_gi5()</literal> takes a <literal>Vector&lt;A&gt;</literal> and since <literal>Z</literal> is a child of <literal>A</literal>, all is fine. Calling <literal>foo_gi6($x)</literal> would be ok in all circumstances since <literal>foo_gi6()</literal> takes a <literal>Vector&lt;mixed&gt;</literal>.
        </para>
      </informalexample>
    </para>
    <para>
      The bottom line here is that until this generic collection is exposed to code that takes or returns a type that will cause incompatibility, the type checker will be relaxed as to what it allows to be added.
    </para>
  </sect1>

  <sect1 xml:id="hack.generics.overrideonreturntype">
    <title>Override on Return Type</title>
    <para>
      Hack brings about a feature to override on return type in a particular circumstance. In essence, a method can be overridden by return type in a subclass if the return type is strictly compatible with the return type of the same method in the superclass. So, this works:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh
class Foo {}
class FooChild extends Foo {}

class AA {
  protected function bar(): Foo { return new Foo(); }
}

class BB extends AA {
  protected function bar(): FooChild { return new FooChild(); }
}
]]>
        </programlisting>
      </informalexample>
    </para>
    <para>
      Take a look at this seemingly similar example:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh
class FooG {}
class FooGChild extends FooG {}

class AAG {
  protected function bar(): Vector<FooG> {
    $x = new Vector();
    $x->add(new FooG());
    return $x;
  }
}

class BBG extends AAG {
  protected function bar(): Vector<FooGChild> {
    $x = new Vector();
    $x->add(new FooGChild());
    return $x;
  }
}
]]>
        </programlisting>
        <para>
          On the surface, it may seem like the above should be accepted by the Hack type checker. However, a closer look indicates otherwise. The parent, <literal>AAG</literal> has a <literal>bar()</literal> that returns a vector containing <literal>FooG</literal>. The child, <literal>BBG</literal>, has a <literal>bar()</literal> that returns a vector containing <literal>FooGChild</literal>. In other words, both return <literal>Vector</literal>, not individual instances of <literal>FooG</literal> or <literal>FooGChild</literal>. Thus, since the return type is a <literal>Vector</literal>, it is impossible to guarantee that the returned vector from <literal>BBG:bar()</literal> won't contain, for example, a mix of <literal>FooChild</literal> and <literal>FooG</literal> &#8212; even to a caller which called it as <literal>AAG::bar()</literal>.
        </para>
        &example.outputs;
        <screen>
<![CDATA[
File "overriding_generics.php", line 15, characters 7-9:
This object is of type BBG
File "overriding_generics.php", line 15, characters 19-21:
It is incompatible with this object of type AAG
Because some of their methods are incompatible,
Read the following to see why:
File "overriding_generics.php", line 8, characters 36-39:
This is an object of type FooG
File "overriding_generics.php", line 16, characters 36-44:
It is incompatible with an object of type FooGChild
]]>
        </screen>
      </informalexample>
    </para>
  </sect1>

  <sect1 xml:id="hack.generics.mixedcompat">
    <title><literal>T&lt;mixed&gt;</literal> Compatibility</title>
    <para>
      <literal>mixed</literal> is sometimes a source of confusion when it comes to compatibility with other types. This confusion can become exacerbated when it comes to generics. For example, should this pass the Hack type checker?
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

class Mailbox<T> {
  private ?T $data;

  public function __construct() {
    $this->data = null;
  }
  public function put(T $mail): void {
    $this->data = $mail;
  }

  public function check(): ?T {
    if ($this->data !== null) {
      return $this->data;
    }
    return null;
  }
}

function mbint(): Mailbox<int> {
  $mbi = new Mailbox();
  $mbi->put(3);
  return $mbi;
}

function mbmixed(Mailbox<mixed> $mbm): void {}

function main() {
  $m = mbint();
  mbmixed($m);
}
]]>
        </programlisting>
        <para>
          Reading the code, one might believe that passing a <literal>Mailbox&lt;int&gt;</literal> to a function that takes a <literal>Mailbox&lt;mixed&gt;</literal> should pass the type checker since <literal>mixed</literal> should be a superset of <literal>int</literal>. However, that belief would be incorrect. A <literal>Mailbox&lt;int&gt;</literal> <emphasis role="strong">is not</emphasis> a subtype of <literal>Mailbox&lt;mixed&gt;</literal>.
        </para>
      </informalexample>
    </para>
    <para>
      Imagine if the code above was modified to look like this:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

// The mailbox can contain any type, but, per instantiation, once associated
// with a type, it cannot change. Mailbox<int>, Mailbox<string>, Mailbox<mixed>
class Mailbox<T> {
  private ?T $data;

  public function __construct() {
    $this->data = null;
  }
  public function put(T $mail): void {
    $this->data = $mail;
  }

  public function check(): ?T {
    if ($this->data !== null) {
      return $this->data;
    }
    return null;
  }
}

function mbint(): Mailbox<int> {
  $mbi = new Mailbox();
  $mbi->put(3);
  return $mbi;
}

function mbmixed(Mailbox<mixed> $mbm): void {
  // Put a string into the mixed Mailbox
  $mbm->put("Hello");
}

function main() {
  $m = mbint();
  // This function puts a string into the Mailbox
  mbmixed($m);
  // Now what was a Mailbox<int> becomes a Mailbox<string>. Probably not expected behavior.
  var_dump($m);
}

main();
]]>
        </programlisting>
        <para>
          Since generic objects are passed by reference, adding a <literal>string</literal> to the <literal>Mailbox&lt;mixed&gt;</literal> in <literal>mbmixed()</literal> actually transforms the <literal>Mailbox&lt;int&gt;</literal> in <literal>main()</literal> to one that can now take a <literal>string</literal>. This is probably not expected behavior and should not be able to pass the type checker. And, in fact, this code does not pass the Hack type checker!
        </para>
        &example.outputs;
        <screen>
<![CDATA[
File "/tmp/mailbox.php", line 36, characters 11-12:
Invalid argument
File "/tmp/mailbox.php", line 30, characters 26-30:
This is a mixed value
File "/tmp/mailbox.php", line 24, characters 27-29:
It is incompatible with an int
]]>
        </screen>
        <para>
          The above code does run on HHVM, however. And that is why this type of code needs to be checked before runtime.
        </para>
        &example.outputs;
        <screen>
<![CDATA[
object(Mailbox)#1 (1) {
  ["data":"Mailbox":private]=>
  string(5) "Hello"
}
]]>
        </screen>
      </informalexample>
    </para>
    <para>
      Even though Hack is able to catch a <literal>T&lt;int&gt;</literal> to <literal>T&lt;mixed&gt;</literal> conversion attempt before runtime, a cleaner way to write the above code is to use a generic method:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

// The mailbox can contain any type, but, per instantiation, once associated
// with a type, it cannot change. Mailbox<int>, Mailbox<string>, Mailbox<mixed>
class Mailbox<T> {
  private ?T $data;

  public function __construct() {
    $this->data = null;
  }
  public function put(T $mail): void {
    $this->data = $mail;
  }

  public function check(): ?T {
    if ($this->data !== null) {
      return $this->data;
    }
    return null;
  }
}

function mbint(): Mailbox<int> {
  $mbi = new Mailbox();
  $mbi->put(3);
  return $mbi;
}

function mbgen<T>(Mailbox<T> $mbm, T $item): void {
  $mbm->put($item);
}

function main() {
  $m = mbint();
  mbgen($m, 4);
  var_dump($m);
}

main();
]]>
        </programlisting>
      </informalexample>
    </para>
  </sect1>

  <sect1 xml:id="hack.generics.constraints">
    <title>Constraints</title>
    <para>
      Generic class and methods can have restrictions to the types that are able to be used for the parameterized type argument upon instantiation or call, respectively. These are called constraints on type parameters. Here is an example:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

abstract class Identity<T> {
  private T $id;
  public function __construct(T $id) {
    $this->id = $id;
  }
  public function getID(): T {
    return $this->id;
  }
}

interface IFoo {}

class CA {}
class CB extends CA {}

class Bar implements IFoo {}
class Baz implements IFoo {}
class Biz {}

final class AnyIdentity<T> extends Identity<T> {}
final class CAIdentity<T as CA> extends Identity<T> {}
final class CBIdentity<T as CB> extends Identity<T> {}
final class FooIdentity<T as IFoo> extends Identity<T> {}

function main_constraints(): void {
  $ai = new AnyIdentity("Hello");
  $ai2 = new AnyIdentity(new Biz());

  $cb = new CBIdentity(new CB());
  $cb2 = new CBIdentity(new CA());  // HACK ERROR!

  $ca = new CAIdentity(new CA());
  $ca2 = new CAIdentity(new CB());

  $fi = new FooIdentity(new Bar());
  $fi2 = new FooIdentity(new Baz());
  $fi3 = new FooIdentity(new Biz()); // HACK ERROR!
}

main_constraints();
]]>
        </programlisting>
      </informalexample>
    </para>
    <para>
      Constraints are declared using the <literal>as</literal> keyword. In the above example, <literal>Identity</literal> is an abstract class with a parameterized type <literal>T</literal>. This class cannot be instantiated; thus, concrete class implementations must be created in order to access the functionality of <literal>Identity</literal>. Four <literal>final</literal> classes were created that extend <literal>Identity</literal>. <literal>AnyIdentity</literal> is a concrete implementation of <literal>Identity</literal>. It has no constraints. Any type may be passed in for <literal>T</literal>. The other three classes do have constraints:
      <itemizedlist>
        <listitem>
          <para>
            <literal>CAIdentity</literal> has a constraint that only the type <literal>CA</literal> (and its children!) may be used for <literal>T</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>CBIdentity</literal> has a constraint that only the type <literal>CB</literal> (and its children!) may be used for <literal>T</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>FooIdentity</literal> has a constraint that only those types that implement the <literal>IFoo</literal> interface (and their children!) may be used for <literal>T</literal>.
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      For the above example, there will be two errors thrown by the Hack type checker. The first is on this line of code:
      <informalexample>
        <programlisting role="php">
<![CDATA[
$cb2 = new CBIdentity(new CA());
]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
File "hack_constraints.php", line 27, characters 29-30:
This is an object of type CB
File "hack_constraints.php", line 38, characters 25-32:
It is incompatible with an object of type CA
File "hack_constraints.php", line 17, characters 31-31:
Considering the constraint on the type 'T'
]]>
        </screen>
        <para>
          This is because <literal>CBIdentity</literal> has a <literal>CB</literal> constraint and <literal>CA</literal> is NOT a child of <literal>CB</literal>. It is actually a parent.
        </para>
      </informalexample>
    </para>
    <para>
      The second Hack error is on this line of code:
      <informalexample>
        <programlisting role="php">
<![CDATA[
$fi3 = new FooIdentity(new Biz());
]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
File "hack_constraints.php", line 28, characters 30-33:
This is an object of type IFoo
File "hack_constraints.php", line 42, characters 26-34:
It is incompatible with an object of type Biz
File "hack_constraints.php", line 17, characters 31-31:
Considering the constraint on the type 'T'
]]>
        </screen>
        <para>
          This error occurs because <literal>Biz</literal> does
          not implement the interface <literal>IFoo</literal>,
          where <literal>IFoo</literal> is a constraint on
          <literal>FooIdentity</literal>.
        </para>
      </informalexample>
    </para>
    <para>
      Here is an example of a constraint on a generic method:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

interface IFaz {}
interface IFar extends IFaz {}
class Faz implements IFaz {}
class Far implements IFar {}
class NoIFaz {}

class Bip {
  public function get<T as IFaz>(T $x): T {
    return $x;
  }
}

function main_constraints_gm(): void {
  $bip = new Bip();
  $bip->get(new Faz());
  $bip->get(new Far());
  $bip->get(new NoIFaz()); // Hack error;
}

main_constraints_gm();
]]>
        </programlisting>
        <para>
          The generic method <literal>get()</literal> has a constraint that only types that implement <literal>IFaz</literal> (or their children!) may be used as a the type parameter <literal>T</literal> to the method. Since the class <literal>Far</literal> implements <literal>IFar</literal> and <literal>IFar</literal> implements <literal>IFaz</literal>, a <literal>Far</literal> is able to be passed to <literal>get()</literal>. However, a <literal>NoIFaz</literal> is not able to be passed to <literal>get()</literal> since it has no chain that leads to an <literal>IFaz</literal>. Here is the Hack error that will occur:
        </para>
        &example.outputs;
        <screen>
<![CDATA[
File "hack_constraints_method.php", line 11, characters 28-31:
This is an object of type IFaz
File "hack_constraints_method.php", line 20, characters 13-24:
It is incompatible with an object of type NoIFaz
File "hack_constraints_method.php", line 11, characters 41-41:
Considering the constraint on the type 'T'
]]>
        </screen>
      </informalexample>
    </para>
    <para>
      A possible question that one may have when reading about constraints is, &quot;Why have a constraint? Why not just have the class in question extend the class that is being used as the constraint?&quot; Here is an example that addresses that question:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

class A {
  public function getVal(): int {
    return 1;
  }
}

class B extends A {
  public function getVal(): int {
    return 2;
  }
  public function foo(): void {}
}

class Box<T> {
  private T $data;
  public function __construct(T $x) {
    $this->data = $x;
  }
  public function get(): T {
    return $this->data;
  }
}

class BoxOfA<T> extends Box<A> {
  private int $sum = 0;
  public function __construct(T $e) {
    parent::__construct($e);
    $this->sum += $e->getVal();
  }
}

function main_con(): void {
  $b = new B();
  $box = new BoxOfA($b);
  $b2 = $box->get();
  $b2->foo();
}
]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
File "constraints.php", line 42, characters 8-10:
The method foo is undefined in an object of type A
]]>
        </screen>
        <para>
          Since <literal>BoxOfA&lt;T&gt;</literal> extends <literal>Box&lt;A&gt;</literal>, the type of <literal>$box</literal> returned upon instantiation is a <literal>Box&lt;A&gt;</literal> even when <literal>BoxOfA</literal> is passed a <literal>B</literal>. Thus, trying to call <literal>foo()</literal> on <literal>$b2</literal> cannot work since there is no <literal>foo()</literal> defined in <literal>A</literal>.
        </para>
        <note>
          <para>
            Since generic types are dropped at runtime, HHVM will not thrown an error when <literal>$b2-&gt;foo()</literal> is called. Instead it will provide the expected output:
            <informalexample>
              &example.outputs;
              <screen>
<![CDATA[
object(B)#1 (0) {
}
object(BoxOfA)#2 (2) {
  ["sum":"BoxOfA":private]=>
  int(2)
  ["data":"Box":private]=>
  object(B)#1 (0) {
  }
}
object(B)#1 (0) {
}
bool(true)
]]>
              </screen>
            </informalexample>
          </para>
        </note>
        <para>
          Constraints can remedy this situation. Making a few small changes to the example, now a <literal>BoxOfA</literal> is constrained to taking an <literal>A</literal> <emphasis role="strong">or its children!</emphasis> So when a <literal>B</literal> (a child of <literal>A</literal>) is passed to <literal>BoxOfA</literal>, a <literal>B</literal> is returned when calling <literal>$box->get()</literal>. Thus, <literal>$b2->foo()</literal> is a perfectly legitimate call. No Hack errors!
        </para>
        <programlisting role="php">
<![CDATA[
<?hh

class A {
  public function getVal(): int {
    return 1;
  }
}

class B extends A {
  public function getVal(): int {
    return 2;
  }
  public function foo(): bool {
    return true;
  }
}

class Box<T> {
  private T $data;
  public function __construct(T $x) {
    $this->data = $x;
  }
  public function get(): T {
    return $this->data;
  }
}

// class BoxOfA<T> extends Box<A>
class BoxOfA<T as A> extends Box<T> {
  private int $sum = 0;
  public function __construct(T $e) {
    parent::__construct($e);
    $this->sum += $e->getVal();
  }
}

function main_con(): void {
  $b = new B();
  var_dump($b);
  $box = new BoxOfA($b);
  var_dump($box);
  $b2 = $box->get();
  var_dump($b2);
  var_dump($b2->foo());
}

main_con();
]]>
        </programlisting>
      </informalexample>
    </para>
    <para>
      A couple of important notes about constraints and the Hack type checker:
      <itemizedlist>
        <listitem>
          <para>
            Currently, Hack only allows
            <emphasis role="strong">one</emphasis> constraint on a type or a
            method.
          </para>
        </listitem>
        <listitem>
          <para>
            Constraints cannot be used with primitive types. Since
            primitives are not inheritable, it wouldn't make sense in such a
            context. Just have the method take the primitive directly.
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </sect1>

  <sect1 xml:id="hack.generics.covariance">
    <title>Covariance and Contravariance</title>
    <para>
      Initially, type parameters were invariant in Hack. There was no implicit
      conversion from one type argument to another. This made things simple from
      a type checking perspective, but limited functionality.
    </para>
    <para>
      Understanding that many first-class languages supports variance, Hack
      supports covariance and contravariance on type arguments. Covariance
      preserves assignment compatability while contravariance reverses
      assignment compatibility.
    </para>
    <para>
      <simplelist>
        <member><literal>+</literal> (plus) is the symbol for covariance
        </member>
        <member><literal>-</literal> (minus) is the symbol for contravariance
        </member>
      </simplelist>
    </para>
    <para>
      Here is a covariance example:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh
class MyClass<+T> {
  public function __construct(T $t) {}
}
class A {}
class B extends A {}

function foo(MyClass<A>): void {}

function bar(): void {
  $b = new B();
  $x = new MyClass($b);
  foo($x);
}
]]>
        </programlisting>
        <para>
          <literal>foo()</literal> can be called with any object assignment
          compatible with <literal>A</literal>. Since <literal>B</literal> is a
          subclass of <literal>A</literal>, this works.
        </para>
      </informalexample>
    </para>
    <para>
      Here is a contravariance example:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh
class MyClass<-T> {
  public function __construct(T $t) {}
}
class A {}
class B extends A {}

function foo(MyClass<B>): void {}

function bar(): void {
  $a = new A();
  $x = new MyClass($a);
  foo($x);
}
]]>
        </programlisting>
        <para>
          <literal>foo()</literal> can be called with any object reverse
          assignment compatible with <literal>B</literal>. Since <literal>A
          </literal> is a parent of <literal>B</literal>, this works.
        </para>
      </informalexample>
    </para>
    <para>
      Let's change the first example a bit so it doesn't work:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh
class MyClass<+T> {
  public function __construct(T $t) {}
}
class A {}
class B extends A {}
class C {}

function foo(MyClass<A>): void {}

function bar(): void {
  $c = new C();
  $x = new MyClass($c);
  foo($x);
}
]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
File "co.php", line 14, characters 7-8:
Invalid argument (Typing[4110])
File "co.php", line 9, characters 22-22:
This is an object of type A
File "co.php", line 12, characters 8-14:
It is incompatible with an object of type C
]]>
        </screen>
        <para>
          <literal>C</literal> is not assignment compatible with <literal>A
          </literal>.
        </para>
      </informalexample>
    </para>
  </sect1>

  <sect1 xml:id="hack.generics.openandclosedtypes">
    <title>Open and Closed Types</title>
    <para>
      With generics, it is useful to discuss the concept of open and closed types. A type is open if it is a type parameter (e.g. <literal>T</literal>). Obviously enough, a type is closed if it is not open (e.g. <literal>int</literal>) . Here is an example of using open and closed types when it comes to generics:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

class Foo<T> {

  public function getOpen(Vector<T> $vec): T {
      return $vec[0];
  }

  public function getClosed(Vector<int> $vec): int {
      return $vec[0];
  }
}
]]>
        </programlisting>
        <para>
          The method <literal>getOpen()</literal> takes an open type and returns an open type. The method <literal>getClosed()</literal> takes a closed type and returns a closed type.
        </para>
      </informalexample>
    </para>
    <para>
      What happens, though, when a method takes an open type and tries to return a closed type using that open type? Take this example using two generic methods:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

function foo<T>(T $a): void {
  echo "foo<T>()";
}
function bar<T>(T $a): int {
  echo "bar<T>()";
  return $a;
}

function main_oct() {
  $x = 5;
  foo($x);
  bar($x);
}

main_oct();
]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
File "open_type_arguments.php", line 9, characters 10-11:
Invalid return type
File "open_type_arguments.php", line 7, characters 24-26:
This is an int
File "open_type_arguments.php", line 7, characters 17-17:
It is incompatible with of type T
]]>
        </screen>
        <para>
          Since <literal>bar()</literal> takes an open type argument, <literal>$a</literal> is not guaranteed to be compatible with an <literal>int</literal>. So it cannot be returned as an <literal>int</literal>, even if <literal>$a</literal> is an <literal>int</literal> when passed in.       <literal>foo()</literal> returns <literal>void</literal>. Thus, as written, <literal>foo()</literal> can type check correctly. However, what happens if <literal>$a</literal> is attempted to be used as an <literal>int</literal> within <literal>foo()</literal>?
        </para>
        <programlisting role="php">
<![CDATA[
<?hh

function foo<T>(T $a): void {
  $x = $a + 10;
  echo "foo<T>()";
}
/*function bar<T>(T $a): int {
  echo "bar<T>()";
  return $a;
}*/

function main_oct() {
  $x = 5;
  foo($x);
  //bar($x);
}

main_oct();
]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
File "open_type_arguments.php", line 5, characters 8-9:
Typing error
File "open_type_arguments.php", line 5, characters 8-9:
This is an int/float because this is used in an arithmetic operation
File "open_type_arguments.php", line 4, characters 17-17:
It is incompatible with of type T
]]>
        </screen>
        <para>
          As probably expected, <literal>$a</literal> cannot be guaranteed to be an <literal>int</literal> since it is passed as an open type <literal>T</literal>. Thus this arithmetic operation cannot be performed.
        </para>
      </informalexample>
    </para>
    <para>
      How can these issues be resolved? These are possibilities, but should be used with caution:
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="strong">Casting</emphasis>: <literal>bar()</literal> could cast <literal>$a</literal> as <literal>int</literal> before returning.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">Return an open type</emphasis>: <literal>bar()</literal> can return a <literal>T</literal> instead of an <literal>int</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong"><literal>// UNSAFE</literal></emphasis>: Use Hack's <literal>UNSAFE</literal> annotation to get around the type checker. Use with extreme caution.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">Constraints</emphasis>: Assuming primitives aren't involved (they are not supported), constraints can be used to help guarantee a return type.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="strong">Rework code</emphasis>: Maybe if this situation arises, the code can be redesigned better.
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </sect1>

  <sect1 xml:id="hack.generics.styleguidelines">
    <title>Style Guidelines</title>
    <para>
      The following are recommended style guidelines for when using generics:
      <itemizedlist>
        <listitem>
          <para>
            Begin all type parameters with <literal>T</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            Name generic parameters with descriptive names (e.g., <literal>class Foo&lt;TWrappedObject&gt;</literal>), unless a single letter is self-explanatory or the generic parameter is a generic-generic parameter type.
          </para>
        </listitem>
        <listitem>
          <para>
            When using a non-descriptive name, a generic class or method with one parameter should generally be named <literal>&lt;T&gt;</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            When using a non-descriptive name, a generic class or method with two or more enumerated parameters should be named in the form of <literal>&lt;Ta, Tb, ...&gt;</literal> or <literal>&lt;T1, T2,...&gt;</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            A collection type with a key and value (such as a Map) should have its generic parameters named <literal>&lt;Tk, Tv&gt;</literal>.
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </sect1>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
