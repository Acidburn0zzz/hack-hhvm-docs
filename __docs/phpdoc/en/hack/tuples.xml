<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="hack.tuples">
  <title>Tuples</title>
  <para>
    Hack has a basic implementation for tuples. A tuple is, for all intents and purposes, an immutable array. With a PHP array, elements can be added and removed at will. With a tuple, after initialization, elements cannot be added to or removed from the tuple. In other words, it remains a fixed size. It is important to note that each element within the tuple is mutable and can be changed.
  </para>
  <note>
    <para>
      The values inside a tuple are, of course, mutable. It is the &quot;shape&quot; of a tuple that is not mutable ... no removing, adding or changing the types of elements
    </para>
  </note>
  <para>
    Also, while collections and type-annotated arrays are designed to contain elements of one type, tuples allow for the mixing of the type of the elements.
  </para>
  <para>
    Here is an example of using a tuple:
    <informalexample>
      <programlisting role="php" location="hack.tuples1.php" />
      <para>
        In fact, the Hack type checker will give you the something similar to the following error when trying to insert a new element into a tuple.
      </para>
      &example.outputs;
      <screen>
<![CDATA[
[~/www] hh_client
File "TupleTest.php", line 17, characters 10-10:
Invalid index
]]>
      </screen>
    </informalexample>
  </para>
  <note>
    <para>
      Underneath the covers, a Hack tuple is just an array. There is nothing to stop the above code from running in HHVM. The code will run without issue. Expected behavior, on the other hand, is another issue. It is the type checker that will catch the errors before runtime. Choosing to ignore the type checker is allowed, but fraught with peril and not recommended.
    </para>
  </note>
  <sect1 xml:id="hack.tuples.usecases">
    <title>Use Cases</title>
    <para>
      Why use a tuple? There are common use cases for when a tuple can be quite valuable. It is important to note, however, there can be other paradigms to accomplish what a tuple can accomplish in many cases. In addition, noting that they actually mutable at runtime, tuples in Hack should be used when wanting the comfort of an immutable type safety check by the Hack type checker. Because, as of now, tuples at runtime are not necessarily tuples as one would expect them to behave.
      <itemizedlist>
        <listitem>
          <para>
            Canonically, a tuple is used when a pair is needed. Hack provides a <literal>Pair</literal> type that is probably better suited for pairs. Pairs are immutable collections with exactly two elements. Tuple can have a variable number of elements.
          </para>
        </listitem>
        <listitem>
          <para>
            Grouping common values together, that are not necessarily of the same type.
          </para>
        </listitem>
        <listitem>
          <para>
            To return multiple values from a method.
          </para>
        </listitem>
        <listitem>
          <para>
            Thread safety. A known immutable object is inherently morethread-safe than a mutable object. (Although, given that tuples in Hack are, in fact, mutable at runtime, the thread safety use case is not as valuable.)
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </sect1>

  <sect1 xml:id="hack.tuples.implementation">
    <title>Tuples Are Implemented As Arrays</title>
    <para>
      The discussion of tuples started with the premise that tuples are immutable. Well, that is true as far as Hack is concerned. In HHVM, tuples are arrays under the covers; thus, HHVM allows tuples to be mutated. In fact, tuples are currently a pure PHP implementation.
      <informalexample>
        <programlisting role="php" location="hack.tuples2.php" />
        <para>
          <literal>func_get_args()</literal> returns an array comprising the a function's argument list.
        </para>
      </informalexample>
    </para>
    <para>
      Repeating the code example from the introduction:
      <informalexample>
        <programlisting role="php" location="hack.tuples3.php" />
        &example.outputs;
        <screen>
<![CDATA[
array(5) {
  [0]=>
  string(1) "3"
  [1]=>
  int(2)
  [2]=>
  int(3)
  [3]=>
  int(4)
  [4]=>
  string(2) "hi"
}
array(5) {
  [0]=>
  string(1) "3"
  [1]=>
  int(2)
  [2]=>
  int(3)
  [3]=>
  int(4)
  [4]=>
  string(2) "hi"
}
array(5) {
  [0]=>
  string(1) "3"
  [1]=>
  int(2)
  [2]=>
  int(3)
  [3]=>
  int(4)
  [4]=>
  string(3) "bye"
}
array(5) {
  [0]=>
  string(1) "3"
  [1]=>
  int(2)
  [2]=>
  int(3)
  [3]=>
  int(4)
  [4]=>
  string(3) "bye"
}
array(6) {
  [0]=>
  string(1) "3"
  [1]=>
  int(2)
  [2]=>
  int(3)
  [3]=>
  int(4)
  [4]=>
  string(3) "bye"
  [5]=>
  string(5) "Good!"
}
array(6) {
  [0]=>
  string(1) "3"
  [1]=>
  int(2)
  [2]=>
  int(3)
  [3]=>
  int(4)
  [4]=>
  string(3) "bye"
  [5]=>
  string(7) "Whoops!"
}
]]>
        </screen>
        <para>
          Declaring a <literal>tuple()</literal> with five elements really calls <literal>func_get_args()</literal> where each of those five elements are part of an integer-indexed array. That is why tuples are indexed exactly like arrays. And arrays are mutable in every way in PHP.
        </para>
      </informalexample>
    </para>
  </sect1>

  <sect1 xml:id="hack.tuples.annotations">
    <title>Type Annotating With Tuples</title>
    <para>
      To review, here is how a tuple is created and used:
      <informalexample>
        <programlisting role="php" location="hack.tuples4.php" />
      </informalexample>
    </para>
    <para>
      However, when adding type annotations that require a tuple, the <literal>tuple</literal> reserved word is not used.
      <informalexample>
        <programlisting role="php" location="hack.tuples5.php" />
      </informalexample>
    </para>
  </sect1>

  <sect1 xml:id="hack.tuples.returningfrommethod">
    <title>Returning a Tuple From a Method</title>
    <para>
      There may be times when it is necessary to multiple values from a method. There are a few options available to accomplish this task. Arrays can be used. Some sort of collection type (e.g. <literal>Vector</literal>) could be used. And, of course, tuples could be used. Here is code that makes use of some of the options:
      <informalexample>
        <programlisting role="php" location="hack.tuples6.php" />
        <para>
          So, why use a tuple when one could use an <literal>array()</literal>or <literal>Vector</literal>? The answer is mutability. Tuples by their very nature are immutable. No adding elements. No removing elements. No changing the types of values within the tuple (the values themselves can be changed, as long as they are type compatible). And having an immutable-style return type may be exactly was is specified. As discussed tuples are currently mutable at runtime. However, the Hack type checker will catch the mutation of tuples before runtime. If the code <literal>$tup[2] = 4;</literal> is uncommented, Hack will give the following error:
        </para>
        &example.outputs;
        <screen>
<![CDATA[
File "return_mult_values.php", line 28, characters 10-10:
Invalid index
]]>
        </screen>
      </informalexample>
    </para>
  </sect1>

  <sect1 xml:id="hack.tuples.initializerexpressions">
    <title>Initializer Expressions</title>
    <para>
      Tuples can be used in initializer expressions. For example, in the below example, class <literal>C</literal> has two <literal>tuple</literal> properties being initialized, one <literal>static</literal> and one <literal>instance</literal>:
      <informalexample>
        <programlisting role="php" location="hack.tuples7.php" />
      </informalexample>
    </para>
  </sect1>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
