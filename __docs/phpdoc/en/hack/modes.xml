<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="hack.modes">
  <title>Hack Modes</title>
  <para>
    When writing Hack code, it can be written in three modes: <emphasis role="strong">strict</emphasis>, <emphasis role="strong">partial</emphasis> or <emphasis role="strong">decl</emphasis>. These modes exist to give developers maximum flexibility when converting their PHP code to Hack and to allow engineers to write new Hack code that can call into existing, non-Hack code. For example, some code might just be inherently dynamic where type checking makes no sense. Or there could be a bug in the type checker. Or there is incorrectly typed code written elsewhere out of the engineer's control.
  </para>
  <para>
    All modes are case-sensitive.
  </para>
  <sect1 xml:id="hack.modes.strict">
    <title>Strict</title>
    <para>
      Strict mode is just what it sounds like. The Hack type checker will catch every type error (see the <literal>// decl</literal> exception below). Any and all code written in strict mode must be correctly type annotated (unless <literal>// UNSAFE</literal> is used - see below). Another rule is that code written in strict mode cannot call into non-Hack code, and still pass the type checker. Here is how strict mode is declared.
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh // strict

// Everything is annotated and type checked
class StrictClass {
  private string $str;

  // Need this constructor or the type checker
  // will complain about uninitialized member
  // variables
  public function __construct() {
    $this->str = "Hello";
  }

  public function foo(int $x, int $y): int {
    if ($x < $y) {
      return 27;
    }
    return 34;
  }

  public function bar(string $a, string $b): string {
    return $a . $b;
  }
}
]]>

        </programlisting>
      </informalexample>
    </para>
    <para>
      Given that strict mode is more restrictive than the other Hack modes, extra care will need to be taken when writing code. Example of such care include:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Trying to use classes that are defined in code not written in Hack (which will produce an <emphasis>unbound name</emphasis> error)
        </para>
      </listitem>
      <listitem>
        <para>
          Using arrays. They cannot be constructed in Hack without being typed. Collections are preferred.
        </para>
      </listitem>
      <listitem>
        <para>
          Annotating all return types, including functions like <literal>main()</literal> in test code.
        </para>
      </listitem>
    </itemizedlist>
  </sect1>
  <sect1 xml:id="hack.modes.partial">
    <title>Partial</title>
    <para>
      Partial mode is the default of Hack. In partial mode, the type checker checks all types other than that encompassed by an <literal>// UNSAFE</literal> comment. Partial mode also allows for the partially typing of a class, method or function (e.g., only type a subset of its arguments). And, also unlike strict mode, partial mode allows engineers to call code that has not yet been &quot;Hack-ified&quot; (in other words, they can call into untyped code).
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh // partial

// Annotated and type checked.
function foo_partial(int $x, int $y): int {
  if ($x > $y) {
    return 27;
  }
  return 34;
}

// Not annotated. Not type checked.
function bar_partial($a, $b) {
  return $a + $b;
}
]]>
        </programlisting>
      </informalexample>
    </para>
    <para>
      or, since partial is the default, the <literal>// partial</literal> can be omitted. <emphasis>In fact, omitting <literal>// partial</literal> is preferred</emphasis>.
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

// Annotated and type checked.
function foo_partial(int $x, int $y): int {
  if ($x > $y) {
    return 27;
  }
  return 34;
}

// Not annotated. Not type checked.
function bar_partial($a, $b) {
  return $a + $b;
}
]]>
        </programlisting>
      </informalexample>
    </para>
    <note>
      <para>
        In Hack's partial mode, it is still possible to misspell a function name in a call to <function>fun</function>. As usual, Hack will just assume everything is correct and the HHVM runtime will catch the error. In strict mode, however, an unbound name error will be thrown by Hack.
      </para>
    </note>
  </sect1>
  <sect1 xml:id="hack.modes.decl">
    <title>Decl</title>
    <para>
      Decl mode is used to allow Hack code written in strict mode to call into legacy code, without having to fix the issues that would be pointed out by partial mode. The type checker will &quot;absorb&quot; the signatures of the code, but will not type check the code. Decl is mainly used when annotating old, existing APIs (i.e., when the code does note meet Hack's stricter subset of PHP). As the following example shows, this could lead to bugs, so be careful.
      <informalexample>
        <para>
          <emphasis>File1.php</emphasis>
        </para>
        <programlisting role="php">
<![CDATA[
<?hh // decl

// Partial mode would catch this. Decl, though, allows // strict
// to call into this.
function bar_partial($a, $b): int {
  return "Hello";
}
]]>
        </programlisting>
        <para>
          <emphasis>File2.php</emphasis>
        </para>
        <programlisting role="php">
<![CDATA[
<?hh // strict

function foo_strict(bool $b): int {
  if ($b) {
    return 4;
  } else {
    return bar_partial(3, 4);
  }
}
]]>
        </programlisting>
      </informalexample>
    </para>
    <para>
      Here <literal>bar_partial()</literal> returns an <literal>int</literal> for return typing purposes.
      However, since the code was declared with <literal>// decl</literal>, the type checker ignores
      the type annotation and the fact that <literal>bar_partial()</literal> actually returns a <literal>string</literal>. However, now <literal>// strict</literal> code can call <literal>bar_partial()</literal> without type checker errors.
    </para>
    <note>
      <para>
        In practical terms, using <literal>// Decl </literal> is equivalent to putting <literal><link linkend="hack.modes.unsafe">// UNSAFE</link></literal> at the top of every function (actually, in this respect, this is really close to how the Hack type checker works). The following example demonstrates this equivalency:
        <informalexample>
          <programlisting role="php">
<![CDATA[
<?hh // decl

function foo(): int {
  return "Hi";
}

function bar(): string {
  return 3;
}
]]>
          </programlisting>
          <programlisting role="php">
<![CDATA[
<?hh

function foo(): int {
  // UNSAFE
  return "Hi";
}

function bar(): string {
  // UNSAFE
  return 3;
}
]]>
          </programlisting>
        </informalexample>
      </para>
      <para>
        So, <literal>// UNSAFE</literal> is used for "letting me do unsafe things one function at a time"; <literal>// decl</literal> is used to, in essence, "unsafe the entire file". If possible, try to use <literal>// UNSAFE</literal> over <literal>// decl</literal> in order to narrow down as much as possible the code that is not type-checked.
      </para>
    </note>
  </sect1>
  <sect1 xml:id="hack.modes.unsafe">
    <title>Unsafe</title>
    <para>
      <literal>// UNSAFE</literal> disables the type checker from the point of unsafe declaration until the end of the current block of code (where the end of the current block generally refers to the associated ending brace (<literal>}</literal>) of which the <literal>// UNSAFE</literal> is declared).
     </para>
     <para>
       From the unsafe comment until the end of the block, the engineer is trusted. It can be useful when there is a bug in the type checker and work must continue. <literal>// UNSAFE</literal> can be used in any mode (<literal>// strict</literal>, <literal>// partial</literal> or <literal>// decl</literal>). It should not be used without discretion, however. Since unsafe code is ignored by the type checker, there are chances that runtime errors may result.
     </para>
     <para>
      Here are two examples that demonstrate how the coverage of <literal> // UNSAFE </literal>.
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh
function unsafe_foo(int $x, int $y): int {
  if ($x > $y) {
    // UNSAFE
    return "I am not checked by the type checker"; // Covered by UNSAFE
  }
  return 34; // NOT covered by UNSAFE
}
]]>
        </programlisting>
        <programlisting role="php">
<![CDATA[
<?hh
function unsafe_foo(int $x, int $y): int {
  if ($x === 3) {
    return 6; // NOT covered by the UNSAFE
  }
  // UNSAFE
  if ($x > $y) {
    return "I am not checked by the type checker"; // Covered by the UNSAFE
  }
  return true; // Covered by the UNSAFE
}
]]>
        </programlisting>
      </informalexample>
    </para>
  </sect1>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
