<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="hack.shapes">
  <title>Shapes</title>
  <para>
    Does this style of PHP code look familiar?
    <informalexample>
      <programlisting role="php">
<![CDATA[
<?hh

function why_shapes(array $arr_as_struct): array {
  if ($arr_as_struct['id'] === '573065673A34Z') {
    $arr_as_struct['count']++;
  }
  else {
    $arr_as_struct['url'] = "http://google.com";
    $arr_as_struct['count']--;
  }
  return $arr_as_struct;
}

function main_why_shapes() {
  $my_struct = array('id' => null, 'url' => null, 'count' => 0);
  $my_struct['id'] = '573065673A34Y';
  $my_struct['url'] = 'http://facebook.com';

  var_dump($my_struct);
  $my_struct = why_shapes($my_struct);
  var_dump($my_struct);
}

main_why_shapes();
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
array(3) {
["id"]=>
string(13) "573065673A34Y"
["url"]=>
string(19) "http://facebook.com"
["count"]=>
int(0)
}
array(3) {
["id"]=>
string(13) "573065673A34Y"
["url"]=>
string(17) "http://google.com"
["count"]=>
int(-1)
}
]]>
      </screen>
    </informalexample>
  </para>
  <para>
    Since PHP does not have the concept of a structs or records, arrays are many times used to mimic a struct or record-like entity . Arrays are also used as "argument bags" to hold a bunch of arguments that will be passed to a function or method.     Shapes were created to bring some structure (no pun intended) and type checking sanity to this use case.
  </para>
  <note>
    <para>
      Classes with only public fields can also be used for the same representation.
    </para>
  </note>
  <para>
    Shapes have the following general syntax:
    <informalexample>
      <programlisting role="php">
<![CDATA[
<?hh
type MyShape = shape('id1' => <type>, 'id2' => <type>);
function foo(MyShape $x): void {}
]]>
      </programlisting>
      <para>
        or
      </para>
      <programlisting role="php">
<![CDATA[
<?hh
newtype MyShape = shape('id1' => <type>, 'id2' => <type>);
function foo(MyShape $x): void {}
]]>
      </programlisting>
    </informalexample>
    <note>
      <para>
        Notice how shapes are declared with the HHVM keyword <literal>type</literal> or <literal>newtype</literal>. This means shapes follow the same behavior as a <link linkend="hack.typealiasing">type alias or opaque type</link> (e.g. underlying behavior can be accessed and changed across files for a type alias).
      </para>
    </note>
  </para>

  <sect1 xml:id="hack.shapes.simpleexample">
    <title>Simple Shape Example</title>
    <para>
      This example creates a shape that represents a point in the
      two-dimensional plane.
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

type Point2D = shape('x' => int, 'y' => int);

function dotProduct(Point2D $a, Point2D $b): int {
  var_dump($a);
  var_dump($b);
  return $a['x'] * $b['x'] + $a['y'] * $b['y'];
}

function main_sse(): void {
  echo dotProduct(shape('x' => 3, 'y' => 3), shape('x' => 4, 'y' => 4));
}

main_sse();
]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
24
]]>
        </screen>
        <para>
          Notice how the "keys" of the shape are indicies to <literal>Point2D</literal> (e.g., <literal>'x'</literal> and <literal>'y'</literal>).
        </para>
      </informalexample>
    </para>
  </sect1>

  <sect1 xml:id="hack.shapes.acrossfiles">
    <title>Shapes Across Files</title>
    <para>
      Building on the example at the introduction of shapes, instead of using an array as a struct-like entity, a shape will be used instead. Also, this example spans across files.
      <informalexample>
        <para><emphasis>shapesAcrossFiles1.php</emphasis></para>
        <programlisting role="php">
<![CDATA[
<?hh

type RandomData = shape('id' => string, 'url' => string, 'count' => int);

function foo_saf(RandomData $rd): RandomData {
  if ($rd['id'] === '573065673A34Z') {
    $rd['count']++;
  }
  else {
    $rd['url'] = "http://google.com";
    $rd['count']--;
  }
  return $rd;
}
]]>
        </programlisting>
        <para><emphasis>shapesAcrossFiles2.php</emphasis></para>
        <programlisting role="php">
<![CDATA[
<?hh

function setup_saf() {
  $rd = shape('id' => null, 'url' => null, 'count' => 0);
  $rd['id'] = '573065673A34Y';
  $rd['url'] = 'http://facebook.com';
  var_dump($rd);
  var_dump(foo_saf($rd));


  // This should cause a Hack error
  // But this will still run in HHVM
  $rd['count'] = 'I should error';
  var_dump(foo_saf($rd));
}
]]>
        </programlisting>
        <para><emphasis>shapesAcrossFiles3.php</emphasis></para>
        <programlisting role="php">
<![CDATA[
<?hh

require_once 'shapesAcrossFiles1.php';
require_once 'shapesAcrossFiles2.php';

function main_saf() {
  setup_saf();
}

main_saf();
]]>
        </programlisting>
        <para>
          Running <literal>main_saf()</literal> should produce a Hack error in <literal>setup_saf()</literal> since <literal>$rd['count']</literal> was set to a <literal>string</literal> and the shape <literal>RandomData</literal> expects <literal>count</literal> to be an <literal>int</literal> when <literal>foo()</literal> is called.
        </para>
        &example.outputs;
        <screen>
<![CDATA[
shapesAcrossFiles2.php:14:20,22: Invalid argument
shapesAcrossFiles1.php:3:69,71: This is an int
shapesAcrossFiles2.php:13:18,33: It is incompatible with a string
]]>
        </screen>
        <para>
          However, HHVM will run this code correctly, most likely with unexpected results.
        </para>
       &example.outputs;
        <screen>
<![CDATA[
array(3) {
  ["id"]=>
  string(13) "573065673A34Y"
  ["url"]=>
  string(19) "http://facebook.com"
  ["count"]=>
  int(0)
}
array(3) {
  ["id"]=>
  string(13) "573065673A34Y"
  ["url"]=>
  string(17) "http://google.com"
  ["count"]=>
  int(-1)
}
array(3) {
  ["id"]=>
  string(13) "573065673A34Y"
  ["url"]=>
  string(17) "http://google.com"
  ["count"]=>
  string(14) "I should error"
}
]]>
        </screen>
      </informalexample>
    </para>
  </sect1>

  <sect1 xml:id="hack.shapes.generics">
    <title>Shapes and Generics</title>
    <para>
      Shapes can be used with <link linkend="hack.generics">generics</link> as shown here:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

type Point<T> = shape ('x' => T, 'y' => T);

function gen_shape_add<T>(Point<T> $pt1, Point<T> $pt2): Point<T> {
  $sumx = $pt1['x'] + $pt2['x'];
  $sumy = $pt1['y'] + $pt2['y'];
  return shape ('x' => $sumx, 'y' => $sumy);
}

function main_gs() {
  // Float based shape
  $pt1 = shape('x' => 1.0, 'y' => 2.0);
  $pt2 = shape('x' => 3.0, 'y' => 4.0);
  var_dump(gen_shape_add($pt1, $pt2));

  // Int based shape
  $pt3 = shape('x' => 1, 'y' => 2);
  $pt4 = shape('x' => 3, 'y' => 4);
  var_dump(gen_shape_add($pt3, $pt4));
}

main_gs();
]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
array(2) {
  ["x"]=>
  float(4)
  ["y"]=>
  float(6)
}
array(2) {
  ["x"]=>
  int(4)
  ["y"]=>
  int(6)
}
]]>
        </screen>
      </informalexample>
    </para>
  </sect1>


  <sect1 xml:id="hack.shapes.summary">
    <title>Summary</title>
    <para>
      Shapes are useful to create type checkable, struct-like entities so that plain arrays are not used for this purpose. PHP arrays are already overloaded enough. Shapes have a syntax that provides similar semantics as a type alias or opaque type, depending on whether <literal>type</literal> or <literal>newtype</literal> is used to declare the shape.
    </para>
  </sect1>

</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
