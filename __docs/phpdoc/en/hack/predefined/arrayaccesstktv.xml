<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 301180 $ -->

<phpdoc:classref xml:id="class.hack.arrayaccesstktv" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>The ArrayAccess&lt;Tk, Tv&gt; interface</title>
 <titleabbrev>ArrayAccess&lt;Tk, Tv&gt;</titleabbrev>

 <partintro>

<!-- {{{ ArrayAccess intro -->
  <section xml:id="hack.arrayaccesstktv.intro">
   &reftitle.intro;
   <para>
    Interface to provide accessing objects as arrays.
   </para>
   <warning>
    <blockquote>
      <para>
        Currently there is a disconnect between the Hack type checker and HHVM when it comes to classes implementing interfaces and abstract methods. This <emphasis role="strong">IS NOT</emphasis> limited to just <literal>ArrayAccess</literal>, but <literal>ArrayAccess</literal> serves as a common example of the problem. <emphasis role="strong">Check out <link xlink:href="https://github.com/facebook/hhvm/issues/2268">this issue</link> and  <link xlink:href="https://github.com/facebook/hhvm/issues/2490">this issue</link> to follow the progress of fixing this bug.</emphasis>
      </para>
    </blockquote>
    <para>
      For example, the following code should be expected to type check and run correctly on HHVM. It does type check with no errors, but you will get a fatal error in HHVM.
      <informalexample>
        <programlisting role="php" location="class.hack.arrayaccesstktv1.php" />
        &example.outputs;
        <screen>
<![CDATA[
Fatal error: Declaration of Foo::offsetExists() must be compatible with that of ArrayAccess::offsetExists() in arrayAccess.php on line 4
]]>
        </screen>
      </informalexample>
    </para>
    <para>
      Currently HHVM is too strict when matching interface methods. Right now, for example, <literal>offsetExists(string)</literal> is not compatible with <literal>offsetExists(Tk)</literal>. So if we change the code to remedy the HHVM problem, we will get a Hack type checker issue.
      <informalexample>
        <programlisting role="php" location="class.hack.arrayaccesstktv2.php" />
        &example.outputs;
        <screen>
<![CDATA[
arrayAccess.php:4:7,9: This object is of type Foo
  arrayAccess.php:4:30,40: It is incompatible with this object of type ArrayAccess
because some of their methods are incompatible.
Read the following to see why:
  interfaces.hhi:81:32,33: This is a string
  arrayAccess.php:5:32,33: It is incompatible with a value of generic type Tk
]]>
        </screen>
      </informalexample>
    </para>
    <para>
      In order to solve this problem (for now), just remove the generic type annotations (i.e. <literal>Tk</literal> and <literal>Tv</literal> from the method parameters and returns in the class that implement <literal>ArrayAccess</literal>. The following code will both type check (in non <literal>// strict</literal> mode) and run correctly.
      <informalexample>
        <programlisting role="php" location="class.hack.arrayaccesstktv3.php" />
      </informalexample>
    </para>
   </warning>
   <caution>
    <para>
      The Hack type checker will allow for objects to implement the <literal>ArrayAccess</literal> (e.g., the type checker will make sure the interface is implemented correctly), but the type checker does not support using array semantics on such an object.... and there are no plans to allow this behavior. For example:
      <informalexample>
        <programlisting role="php" location="class.hack.arrayaccesstktv4.php" />
        &example.outputs;
        <screen>
<![CDATA[
File "/tmp/aa1.php", line 6, characters 3-7:
This is not a container, this is an object of type Obj
File "/tmp/aa1.php", line 4, characters 8-16:
You might want to check this out
]]>
        </screen>
      </informalexample>
    </para>
   </caution>
  </section>
<!-- }}} -->

  <section xml:id="hack.arrayaccesstktv.synopsis">
   &reftitle.interfacesynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>ArrayAccess&lt;Tk, Tv&gt;</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>ArrayAccess&lt;Tk, Tv&gt;</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.hack.arrayaccesstktv')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="hack.arrayaccesstktv.examples">
   <example xml:id="arrayaccesstktv.example.basic"><!-- {{{ -->
    <title>Basic usage</title>
    <programlisting role="php" location="class.hack.arrayaccesstktv5.php" />
    &example.outputs.similar;
    <screen>
<![CDATA[
object(Obj)#1 (1) {
  ["container":"Obj":private]=>
  object(HH\Map)#2 (1) {
    [3]=>
    int(3)
  }
}
]]>
    </screen>
   </example><!-- }}} -->
  </section>

 </partintro>

 &hack.predefined.arrayaccesstktv.offsetexists;
 &hack.predefined.arrayaccesstktv.offsetget;
 &hack.predefined.arrayaccesstktv.offsetset;
 &hack.predefined.arrayaccesstktv.offsetunset;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
