<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="hack.unsupported">
  <title>Unsupported PHP Features in Hack</title>
  <note>
    <para>
      These are features that the Hack language does not support (i.e., the Hack type checker will give you an error if you try to use them). However, HHVM supports these features just fine when using PHP code.
    </para>
  </note>
  <para>
    While Hack is quite symbiotic with the PHP language, there are some PHP features that are not supported by Hack and the type checker. Here is a non-exhaustive list:
    <itemizedlist>
      <listitem>
        <para>
          Rarely used language constructs including <literal>goto</literal>, <literal>if:...endif;</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>AND</literal>, <literal>OR</literal>, <literal>XOR</literal> operators. Use <literal>&amp;&amp;</literal>, <literal>||</literal>, <literal>^</literal> instead.
        </para>
      </listitem>
      <listitem>
        <para>
          References (e.g., <literal>function foo(&amp;$x)</literal>)
        </para>
      </listitem>
      <listitem>
        <para>
          The <literal>@</literal> symbol to silence errors.
        </para>
      </listitem>
      <listitem>
        <para>
          Mixing static and instance function calls (<literal>A::foo()</literal> vs. <literal>$a->foo()</literal> )
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>break N</literal> and <literal>continue N</literal>
        </para>
      </listitem>
      <listitem>
        <para>
          Dynamic features such as <literal>eval</literal> and <literal>$$x</literal>
        </para>
      </listitem>
      <listitem>
        <para>
          &quot;Undefined&quot; variables
        </para>
      </listitem>
      <listitem>
        <para>
          Globals (e.g., <literal>global $x;</literal>)
        </para>
      </listitem>
      <listitem>
        <para>
          Variable variables (e.g. <literal>$a = &quot;hello&quot;; $$a = &quot;world&quot;; echo &quot;$a + $hello&quot;;</literal>)
        </para>
      </listitem>
      <listitem>
        <para>
          Writing <literal>list(, $b) = array(3,4)</literal> is not allowed. Instead use <literal>$_</literal>, i.e.: <literal>list($_, $b) = array(3, 4)</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
         Using a string directly as a function is not supported (e.g., <literal>$func = 'myFunc'; $func(1,2);</literal>). Instead wrap the string with <function>fun</function> (e.g., <literal>$func = fun('myFunc'); $func(1, 2);</literal>).
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>ArrayAccess</literal>. Hack allows such objects; it just will not recognize them as arrays. Not only is <literal>ArrayAccess</literal> an &quot;interesting&quot; interface (e.g., having a <literal>null</literal> key means &quot;append&quot;), but supporting it causes a lot of strange edge cases such as needing more complicated checks around instance variable initialization. Since <literal>ArrayAccess</literal> is typically used to migrate old code, it is not supported for now; support could happen if a compelling case arose.
        </para>
      </listitem>
      <listitem>
        <para>
          Case-insensitive function calls (the Hack type checker is case-sensitive).
        </para>
      </listitem>
      <listitem>
        <para>
          Mixed HTML and Hack code. Use a templating engine or <link linkend="hack.xhp">XHP</link>.
        </para>
      </listitem>
      <listitem>
        <para>
          Incrementing and decrementing a string (e.g. <literal>$s = "abcd"; $s++;</literal>).
        </para>
      </listitem>
    </itemizedlist>
  </para>
  <sect1 xml:id="hack.unsupportedphpfeatures.toplevelcode">
    <title>Top-level code</title>
    <para>
      There is something else to note about what Hack doesn't support: top-level code. This may be surprising, but the Hack type checker wants everything in a class or function (global scope static analysis can prove to be very difficult). The implication here is that the Hack type checker will ignore any top-level code when in <link linkend="hack.modes.partial"><literal>partial</literal></link> or <link linkend="hack.modes.decl"><literal>decl</literal></link> modes, and actually throw an error in <link linkend="hack.modes.strict"><literal>strict</literal></link> mode. For example:
      <informalexample>
        <programlisting role="php" location="hack.unsupported1.php" />
        &example.outputs;
        <screen>
<![CDATA[
File "/tmp/topCode.php", line 6, characters 1-3:
Remove all toplevel statements except for requires
]]>
        </screen>
        <para>
          As with many cases in Hack, the above code will run in HHVM just fine. So typing <literal>hhvm topCode.php</literal> will run correctly. The code just will not be type checked.
        </para>
      </informalexample>
    </para>
    <note>
      <para>
        As you can see from the error message in the above example, the only
        top-level statement allowed by the Hack type checker in <literal>
        // strict</literal> mode is <literal>require</literal> and <literal>
        require_once</literal>, while, as stated above, any top-level code in
        other Hack modes (e.g., <literal>// partial</literal>) are ignored.
      </para>
      <para>
        The way to get around this is to wrap all top-level code around a
        function call. <literal>main()</literal> can be used to serve this
        purpose.
      </para>
    </note>
  </sect1>
  <sect1 xml:id="hack.unsupportedphpfeatures.collisions">
    <title>Collisions</title>
    <para>
      Unlike PHP, Hack does not allow one to define a function on a class that collides with the class name. For example, this is acceptable in PHP:
      <informalexample>
        <programlisting role="php" location="hack.unsupported2.php" />
        <para>
          However, this is not acceptable in Hack:
        </para>
        <programlisting role="php" location="hack.unsupported3.php" />
        &example.outputs;
        <screen>
<![CDATA[
File "c.php", line 3, characters 21-29:
This is a dangerous method name, if you want to define a constructor, use __construct
]]>
        </screen>
      </informalexample>
    </para>
    <para>
      The reason for Hack disallowing this comes down to constructors. In the above example, <literal>foo()</literal> behaves like a constructor and gets called upon instantiation using <literal>new Foo()</literal>. This could be very confusing especially when there is an explicit constructor as well.
      <informalexample>
        <programlisting role="php" location="hack.unsupported4.php" />
      </informalexample>
    </para>
  </sect1>
  <sect1 xml:id="hack.unsupportedphpfeatures.explicitconstructors">
    <title>Explicitly Named Constructors</title>
    <para>
      Unlike <link linkend="language.oop5.decon">PHP</link>, Hack does not allow
      naming a constructor explicitly (e.g., by the name of the class):
      <informalexample>
        <programlisting role="php" location="hack.unsupported5.php" />
        <para>
          However, this is not acceptable in Hack:
        </para>
        <programlisting role="php" location="hack.unsupported6.php" />
        &example.outputs;
        <screen>
<![CDATA[
File "c.php", line 3, characters 21-29:
This is a dangerous method name, if you want to define a constructor, use __construct
]]>
        </screen>
      </informalexample>
    </para>
    <para>
      Use <literal>__construct()</literal> instead.
    </para>
  </sect1>
  <sect1 xml:id="hack.unsupportedphpfeatures.parentstaticmethods">
    <title>Parent Static Methods</title>
    <para>
      PHP allows children to call static methods in the parent. For example:
      <informalexample>
        <programlisting role="php" location="hack.unsupported7.php" />
        <para>
          Hack does not currently allow this. The following error will be displayed:
        </para>
        &example.outputs;
        <screen>
<![CDATA[
File "static.php", line 12, characters 24-35:
The method staticMethod is undefined in an object of type StaticFoo
File "static.php", line 4, characters 28-39:
The closest thing is staticMethod but it's a static method
]]>
        </screen>
      </informalexample>
    </para>
  </sect1>
  <sect1 xml:id="hack.unsupportedphpfeatures.callingstaticmethods">
    <title>Calling Static Methods</title>
    <para>
      In PHP, static methods can be called at the class level or the instance level. For example, the following two ways to call <literal>bar()</literal> are both acceptable:
      <informalexample>
        <programlisting role="php" location="hack.unsupported8.php" />
      </informalexample>
    </para>
    <para>
      Hack does not allow the instance level static calls in <literal>// strict</literal> mode (this is allowed in <literal>// partial</literal> mode). Hack will balk about using &quot;dynamic classes&quot;.
      <informalexample>
        <programlisting role="php" location="hack.unsupported9.php" />
        &example.outputs;
        <screen>
<![CDATA[
File "StaticFoo.php", line 11, characters 3-4:
Don't use dynamic classes
]]>
        </screen>
      </informalexample>
    </para>
  </sect1>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
