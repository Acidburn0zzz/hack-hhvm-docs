<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="hack.constructorargumentpromotion">
  <title>Constructor Argument Promotion</title>
  <para>
    Most PHP programmers are familiar with defining class properties.
    <informalexample>
      <programlisting role="php">
<![CDATA[
<?hh

class Person {
  private string $name;
  private int $age;

  public function __construct(string $name, int $age) {
    $this->name = $name;
    $this->age = $age;
  }
}
]]>
      </programlisting>
    </informalexample>
  </para>
  <para>
    This is pretty straightforward. Declare the property. Assign the property with a value passed to the constructor.
  </para>
  <para>
    With just a few properties, this is not too cumbersome. Imagine a class with ten properties. It could easily become tedious to basically declare the properties twice, once in the class header and once in the constructor.
  </para>
  <para>
    <emphasis role="bold">Introducing constructor argument promotion</emphasis>. This is a small, yet very useful syntatic improvement provided by the Hack language. Now instead of writing code like the example above, you can write:
    <informalexample>
      <programlisting role="php">
<![CDATA[
<?hh
class Person {
  public function __construct(public string $name,
                              protected int $age,
                              private bool $gender) {}
}
]]>
      </programlisting>
      <para>
        That's it. The class members will automatically be created and assigned to what is passed into the constructor. Syntatic sugar, yes. Typing and productivity win, for sure.
      </para>
    </informalexample>
  </para>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
