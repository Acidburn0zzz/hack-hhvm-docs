<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="hack.lambda">
  <title>Lambda Expressions</title>
  <para>
    In many programming languages, it can be useful to have a feature that allows the programmer to define a small anonymous function inline that can be treated as a program value, stored into variables and invoked at a later time. Such features go by different names depending on the language, but generally they can all be described using the term &quot;anonymous functions&quot;. Typically anonymous functions allow the programmer to capture one or more local variables from the enclosing function body (either implicitly or explicitly), which can be convenient for certain use cases.
  </para>
  <para>
    In PHP 5.3 the closures feature was introduced, which allowed the programmer to write anonymous functions like so:
    <informalexample>
      <programlisting role="php" location="hack.lambda1.php" />
      &example.outputs;
      <screen>
<![CDATA[
barbaz
]]>
      </screen>
    </informalexample>
  </para>
  <para>
    Unfortunately, PHP's closure feature has several shortcomings. First, capturing variables from the enclosing function body is not done implicitly, but rather it requires the programmer to explicitly list which variables should be captured in the "use(..)"clause. Second, even when no variables from the enclosing function body are being captured, the syntax is still relatively verbose compared with anonymous functions in several other languages. Thus while PHP closures help the programmer for some cases, their verbosity makes them more cumbersome to use particularly for design patterns that make heavy use of closures that capture variables and closures nested inside other closures.
  </para>
  <para>
    To address the shortcomings of PHP closures, HHVM introduced a &quot;lambda expression&quot; feature. Lambda expressions offer similar functionality to PHP closures, but they capture variables from the enclosing function body implicitly and are less verbose in general.
  </para>
  <para>
    Here are two simple examples of how to use lambda expressions. You can find more examples <link linkend="hack.lambda.examples">here</link>.
    <informalexample>
        <programlisting role="php" location="hack.lambda2.php" />
      </informalexample>
      <informalexample>
        <programlisting role="php" location="hack.lambda3.php" />
      </informalexample>
    </para>
  <note>
    <para>
      There are currently some limitations to lambda expressions that are being worked on or considered:
      <itemizedlist>
        <listitem>
          <para>
            Lambda expressions don't support capturing variables by reference. If the programmer wants to capture variables by reference, they must use PHP 5.3 closure syntax and put "&amp;" in front of the variable in the &quot;use(..)&quot; list.
          </para>
        </listitem>
        <listitem>
          <para>
            Lambda expressions don't support returning by reference at present, but support could be added in the future.
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </note>

  <sect1 xml:id="hack.lambda.design">
    <title>Design</title>
    <para>
      A lambda expression is denoted in the source code by using the <literal>==></literal> binary operator, aka the lambda arrow. The left hand argument of the lambda arrow is the parameter list, and the right hand argument is either an expression or a curly brace-enclosed list of statements.
      <informalexample>
        <programlisting role="php" location="hack.lambda4.php" />
        &example.outputs;
        <screen>
<![CDATA[
barbaz
]]>
        </screen>
      </informalexample>
    </para>
    <para>
      When a lambda expression is executed at run time, it creates an object of type <literal>Closure</literal>, similar to what PHP 5.3's closure syntax does. Objects of type <literal>Closure</literal> created by lambda expression syntax vs. PHP 5.3's closure syntax is interchangeable; both offer the same semantics when stored in variables, passed around, or invoked. Objects of type <literal>Closure</literal> retain their current semantics, and both lambda expression syntax and PHP 5.3 closure syntax will continue to be supported going forward.
    </para>
    <para>
      Lambda expressions were designed to allow for extra brevity in common cases. In most cases the parameter list on the left hand side must be wrapped in parentheses, however if no return type is being specified AND there is exactly one parameter with no type hint and no default value then the parentheses can be omitted. Also when the right hand side is just a single expression, the result of expression will be returned as the return value when the <literal>Closure</literal> object is invoked, which allows the programmer to avoid having to type "return"explicitly in many cases. The example above is equivalent to the following:
      <informalexample>
        <programlisting role="php" location="hack.lambda5.php" />
        &example.outputs;
        <screen>
<![CDATA[
barbaz
]]>
        </screen>
      </informalexample>
    </para>
    <para>
      The <literal>==></literal> operator has relatively low precedence compared with other operators. In example #2 above, the <literal>==></literal> has lower precedence than the <literal>.</literal> operator, so the second line of function foo() is parsed as <literal>return ($y ==> ($x . $y));</literal>. This is convenient because it allows lambda expressions to have complex right hand sides without the need to wrap the right hand side in parentheses in many cases. Also, the <literal>==></literal> operator is right associative and if desired can be chained together, for example:
      <informalexample>
        <programlisting role="php" location="hack.lambda6.php" />
        &example.outputs;
        <screen>
<![CDATA[
11
]]>
        </screen>
      </informalexample>
    </para>
    <para>
      Lambda expressions automatically capture any variables appearing in their body that also appear in the enclosing lexical function scopes transitively (i.e. nested lambda expressions can refer to variables from several levels out, with intermediate lambda expressions capturing that variable so it can be forwarded to the inner lambda expression). Variables are only captured when they are statically visible as names in the enclosing scope; i.e. the capture list is computed statically, not based on dynamically defined names in the scope. A lambda expression's captured variables are captured with the same "by value" semantics that are used for variables in the <literal>use(..)</literal> list of PHP 5.3 closure that aren't preceded by <literal>&amp;</literal>.
    </para>
  </sect1>

  <sect1 xml:id="hack.lambda.operator">
    <title>Why <literal>==></literal>?</title>
    <para>
      <figure>
        <title>Lambda Operator</title>
        <mediaobject>
          <alt>Lambda Operator is goodness</alt>
          <imageobject>
            <imagedata fileref="en/hack/figures/lambdaop.jpg" />
          </imageobject>
        </mediaobject>
      </figure>
      PHP5 and HHVM already use <literal>=></literal> (aka the double arrow) as a separator in array literals, collection literals, and yield statements. As such, trying to co-opt <literal>=></literal> for lambda expressions leads to some ambiguous cases, and the different possible schemes for arbitrarily resolving these ambiguities all felt like they would catch the developer by surprise and cause confusion/frustration and increase how often things needed to be wrapped in parentheses. Likewise PHP5 might start using <literal>=></literal> for other purposes in the next few years that might conflict with using <literal>=></literal> for lambda expressions.
    </para>
    <para>
      We all went into the woods with pens and pads of paper and ate hallucinogenic berries we found to come up with ideas. Someone suggested two equal signs followed by a greater than sign and we all burst into uncontrollable laughter. The laughter was followed by intense philosophical introspection into the nature of symbols, and how it's weird that we draw two parallel lines for the equal sign, and how it's fun to think about how they decided which symbols went on the standard keyboard. As the effects of the berries wore off and we started to walk back, we looked at the <literal>==></literal> symbol we had written down and thought about how it all fits together with the abstract architecture of the universe, and how it strikes a chord within us that gives a calming sense of harmony with the world.
    </para>
  </sect1>

  <sect1 xml:id="hack.lambda.examples">
    <title>Examples</title>
    <para>
      Expression-like lambdas with a single argument:
      <informalexample>
        <programlisting role="php" location="hack.lambda7.php" />
      </informalexample>
    </para>
    <para>
      Expression-like lambdas with no arguments or more than one argument require parentheses around the parameter list:
      <informalexample>
        <programlisting role="php" location="hack.lambda8.php" />
      </informalexample>
    </para>
    <para>
      A compound statement can be given as the body of lambda expression by using curly braces like so:
      <informalexample>
        <programlisting role="php" location="hack.lambda9.php" />
      </informalexample>
    </para>
    <para>
      Variables are captured automatically and transitively (including <literal>$this</literal>):
      <informalexample>
        <programlisting role="php" location="hack.lambda10.php" />
      </informalexample>
    </para>
    <para>
      Use parentheses if you need to provide parameter or return type hints, or if you need to provide default values for parameters:
      <informalexample>
        <programlisting role="php" location="hack.lambda11.php" />
      </informalexample>
    </para>
  </sect1>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
