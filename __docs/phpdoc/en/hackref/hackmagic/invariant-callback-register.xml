<?xml version="1.0" encoding="utf-8"?>

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.hack.invariant_callback_register">
 <refnamediv>
  <refname>invariant_callback_register</refname>
  <refpurpose>Registers a callback for when <function>invariant_violation</function> is called</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>invariant_callback_register</methodname>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
  </methodsynopsis>
  <para>
   When <function>invariant_violation</function> is called, either directly or via an <function>invariant</function> failure, the callback registered with <function>invariant_callback_register</function> is called with the same arguments that were passed to <function>invariant_violation</function>. This provides an opportunity to do custom logging or throw a custom exception.
  </para>
  <para>
   Subsequent calls to <function>invariant_callback_register</function> will replace the previously registered callback, if any. Setting a value of <literal>null</literal> will unregister a previously registered callback.
  </para>
  <para>
   This function isn't actually special-cased by the type checker, but is included here due to its inextricably close relationship with <function>invariant</function> and <function>invariant_violation</function>, which are.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Callback for <function>invariant_violation</function> to call
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Void.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Using <function>invariant_callback_register</function> to throw a custom exception</title>
    <programlisting role="php" location="function.hack.invariant_callback_register1.php" />
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>invariant</function></member>
    <member><function>invariant_violation</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
