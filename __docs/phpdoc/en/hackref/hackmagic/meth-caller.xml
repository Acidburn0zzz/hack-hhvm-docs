<?xml version="1.0" encoding="utf-8"?>

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.hack.meth_caller">
 <refnamediv>
  <refname>meth_caller</refname>
  <refpurpose>Creates a callable to call an instance method on any object</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>callable</type><methodname>meth_caller</methodname>
   <methodparam><type>string</type><parameter>class_name</parameter></methodparam>
   <methodparam><type>string</type><parameter>method_name</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>meth_caller</function> takes a class name and a method name, and returns a callable which will invoke that method on any object of that class passed to the callable. (This is hard to explain, see examples below.) Like <function>fun</function>, this is in order to aide the type checker in statically analyzing callbacks passed into and out of functions.
  </para>
  <para>
   Unlike <function>inst_meth</function>, this returns a callable which calls a specific method on an object to be provided later.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>class_name</parameter></term>
     <listitem>
      <para>
       Class name representing the type of objects we are calling a method on.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>method_name</parameter></term>
     <listitem>
      <para>
       Method to call.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Callable which will call <parameter>method_name</parameter> when passed an object of type <parameter>class_name</parameter>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Simple <function>meth_caller</function> usage</title>
    <programlisting role="php">
<![CDATA[
<?hh

class C {
  function f(): string {
    return 'hi test';
  }
}

function test(): void {
  $c = new C();

  // meth_caller will invoke method 'f' on objects of type 'C'.
  $f = meth_caller('C', 'f');
  echo $f($c); // Prints "hi test"
}
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>More realistic callback usage</title>
    <programlisting role="php">
<![CDATA[
<?hh

function run_callback((function (C): string) $f, C $c) {
  return $f($c);
}

function test2(): void {
  $c = new C();

  // A more realistic example, where meth_caller can be used to generate a
  // callback that can be passed around with full type information.
  $f = meth_caller('C', 'f');
  echo run_callback($f, $c); // Prints "hi test"
}
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>meth_caller</function> used as callback for a map</title>
    <programlisting role="php">
<![CDATA[
<?hh

$v = Vector {
  Vector {42, 42, 42},
  Vector {42}
};

$v->map(meth_caller('Vector', 'count')); // returns Vector {3, 1}
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>fun</function></member>
    <member><function>class_meth</function></member>
    <member><function>inst_meth</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
