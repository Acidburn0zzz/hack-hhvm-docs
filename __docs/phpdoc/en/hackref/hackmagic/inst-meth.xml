<?xml version="1.0" encoding="utf-8"?>

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.hack.inst_meth">
 <refnamediv>
  <refname>inst_meth</refname>
  <refpurpose>Creates a callable to call an instance method on a specific object</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>callable</type><methodname>inst_meth</methodname>
   <methodparam><type>object</type><parameter>target</parameter></methodparam>
   <methodparam><type>string</type><parameter>method_name</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>inst_meth</function> takes an object and a method name, and returns a callable which will invoke that method on that class instance. Like <function>fun</function>, this is in order to aide the type checker in statically analyzing callbacks passed into and out of functions.
  </para>
  <para>
   Unlike <function>meth_caller</function>, this returns a callable which calls a specific method on the specific object passed in.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>target</parameter></term>
     <listitem>
      <para>
       Object to call a method on.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>method_name</parameter></term>
     <listitem>
      <para>
       Instance method to call. Must be a constant, single-quoted string.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Callable which will call <parameter>target</parameter><literal>-></literal><parameter>method_name</parameter>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Simple <function>inst_meth</function> usage</title>
    <programlisting role="php">
<![CDATA[
<?hh

class C {
  public function f(string $s) {}
}

function test(): void {
  $c = new C();

  // The type checker cannot determine what function $f refers to. It will reject
  // this in strict mode, but in partial mode will admit it, even though it
  // fails at runtime.
  $f = array($c, 'f');
  $f(1);

  // But, with a call to inst_meth(), we can know what function $f refers to,
  // and check its arguments statically. This will produce a type error (as
  // shown below)
  $f = inst_meth($c, 'f');
  $f(1);
}
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
im.php:20:15,15: Invalid argument
  im.php:4:21,26: This is a string
  im.php:20:15,15: It is incompatible with an int
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>inst_meth</function> is most useful for callbacks</title>
    <programlisting role="php">
<![CDATA[
<?hh

function run_callback((function (string): void) $f, string $s) {
  $f($s);
}

function test2(): void {
  $c = new C();

  // Although this works at runtime, the type checker will reject this, since an
  // array is not a function.
  run_callback(array($c, 'f'), 'test');

  // But this is acceptable:
  run_callback(inst_meth($c, 'f'), 'test');
}
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>inst_meth</function> used as callback for a filter</title>
    <programlisting role="php">
<![CDATA[
<?hh

class C {
  public function isOdd(int $i): bool {
    return $i % 2 == 1;
  }

  public function filter(Vector<int> $data): Vector<int> {
    $callback = inst_meth($this, 'isOdd');
    return $data->filter($callback);
  }
}

$c = new C();
$v = Vector { 1, 2, 3 };
$c->filter($v); // Returns Vector { 1, 3 }
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>fun</function></member>
    <member><function>class_meth</function></member>
    <member><function>meth_caller</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
