<?xml version="1.0" encoding="utf-8"?>

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.hack.fun">
 <refnamediv>
  <refname>fun</refname>
  <refpurpose>Creates a function type from a constant string</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>callable</type><methodname>fun</methodname>
   <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>fun</function> takes a constant string and returns a callable representing the function named by the constant string. In the type checker, the return value of this function has a proper function type, based upon looking up the function prototype named in the argument. This allows the type checker to properly check callbacks which may be passed around; traditional PHP passes around strings, which are impossible to statically analyze and check invocations of.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>function_name</parameter></term>
     <listitem>
      <para>
       Function of which to return a type checkable callable form. Must be a constant, single-quoted string.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Callable representing the input function, with full type checking information.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>fun</function> gives the type checker visibility into a callback and function call</title>
    <programlisting role="php" location="function.hack.fun1.php" />
    <para> The non <literal>fun()</literal> usage will be type checked as follows</para>
    <screen>
<![CDATA[
f.php:11:3,7: This call is invalid, this is not a function, it is a string
]]>
    </screen>
    <para> The <literal>fun()</literal> usage will be type checked as follows</para>
    <screen>
<![CDATA[
f.php:17:6,6: Invalid argument
  f.php:3:13,18: This is a string
  f.php:17:6,6: It is incompatible with an int
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>fun</function> is most useful for callbacks</title>
    <programlisting role="php" location="function.hack.fun2.php" />
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>class_meth</function></member>
    <member><function>inst_meth</function></member>
    <member><function>meth_caller</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
