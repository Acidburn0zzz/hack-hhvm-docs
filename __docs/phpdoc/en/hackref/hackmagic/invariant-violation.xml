<?xml version="1.0" encoding="utf-8"?>

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.hack.invariant_violation">
 <refnamediv>
  <refname>invariant_violation</refname>
  <refpurpose>Throws an exception when a program invariant is violated</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>invariant_violation</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>invariant_violation</function> throws an exception when a program invariant is violated. If a handler has been registered with <function>invariant_callback_register</function>, that callback is called with the same set of arguments passed to <function>invariant_violation</function>. If a callback has not been defined, or if that callback returns, an exception of type InvariantException is thrown with its message set to the <function>sprintf</function> of the arguments passed to <function>invariant_violation</function>.
  </para>
  <para>
   The recommended use of <function>invariant</function> and <function>invariant_violation</function> are only to indicate programmer error for conditions that should <emphasis>never</emphasis> occur. Their error handling semantics are likely too coarse for general use.
  </para>
  <para>
   The Hack type checker is aware that <function>invariant_violation</function> can never return and always throws, and takes this into account in its program flow analysis.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
       <function>sprintf</function>-style format string to pass to <function>invariant_violation</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Always throws.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>invariant_violation</function> affects control flow analysis</title>
    <programlisting role="php">
<![CDATA[
<?hh

function f(): int {
  if (the_world_has_ended()) {
    invariant_violation('The world has ended, how is this script running?');
    // No need to return anything here, the type checker knows we can't get here.
  } else {
    return 1;
  }

  // No need to return anything here either, since the type checker knows all
  // relevant cases are covered above.
}
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>invariant</function></member>
    <member><function>invariant_callback_register</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
