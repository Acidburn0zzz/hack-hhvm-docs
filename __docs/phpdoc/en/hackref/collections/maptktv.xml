<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: $ -->
<phpdoc:classref xml:id="class.hack.maptktv" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>The Map&lt;Tk, Tv&gt; class</title>
 <titleabbrev>Map&lt;Tk, Tv&gt;</titleabbrev>

 <partintro>

<!-- {{{ ClassName intro -->
  <section xml:id="maptktv.intro">
   &reftitle.intro;
   <para>
    <link linkend="hack.collections.map">Map</link> is an ordered dictionary-style collection. HHVM provides a native implementation for this class. The Hack class definition is not actually used at run time; it is simply provided for the Hack type checker and for developer reference.
   </para>
   <para>
    Like all objects in Hack, Maps have reference-like semantics. When a caller passes a Map to a callee, the callee can modify the Map and the caller will see the changes. Maps do not have "copy-on-write" semantics.
   </para>
   <para>
    Maps preserve insertion order of key/value pairs. When iterating over a Map, the key/value pairs appear in the order they were inserted. Also, Maps do not automagically convert integer-like string keys (ex. "123") into integer keys.
   </para>
   <para>
    Maps only support integer keys and string keys. If a key of a different type is used, an exception will be thrown.
   </para>
   <para>
     Maps support <literal>$m[$k]</literal> style syntax for getting and setting values by key. Maps also support <literal>isset($m[$k])</literal> and <literal>empty($m[$k])</literal> syntax, and they provide similar semantics as arrays. Adding an element using <literal>$m[] = ..</literal> syntax is not supported unless you assign a <link linkend="class.hack.pairtv1tv2">Pair</link>.
   </para>
   <para>
    Maps do not support iterating while new keys are being added or elements are being removed. When a new key is added or an element is removed, all iterators that point to the Map shall be considered invalid.
   </para>
   <para>
    Maps do not support taking elements by reference. If binding assignment (<literal>=&amp;</literal>) is used with an element of a Map, or if an element of a Map is passed by reference, or if a Map is used with foreach by reference, an exception will be thrown.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="maptktv.synopsis">
   <title>Class synopsis</title>

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>Map&lt;Tk, Tv&gt;</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <modifier>final</modifier> <modifier>class</modifier>
     <ooclass>
      <classname>Map&lt;Tk, Tv&gt;</classname>
     </ooclass>

<!-- If the class implements an interface, or two, use this (one oointerface element per interface) -->
     <oointerface>
      <interfacename>MutableMap&lt;Tk, Tv&gt;</interfacename>
     </oointerface>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
     <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.hack.maptktv')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[1])" />
     <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.hack.maptktv')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
  </section>
 </partintro>

 &hackref.collections.entities.maptktv;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
