<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 306611 $ -->
 <chapter xml:id="install-intro.intro" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <info><title>Introduction</title></info>

  <section xml:id="install-intro.intro.php">
   <info><title>What is PHP?</title></info>
   <para>
    <acronym>PHP</acronym> (recursive acronym for <literal>PHP: Hypertext
    Preprocessor</literal>) is a widely-used open source general-purpose
    scripting language that is especially suited for web
    development and can be embedded into HTML.
   </para>
   <para>
    Nice, but what does that mean? An example:
   </para>
   <para>
    <example>
     <info><title>An introductory PHP example</title></info>
     <programlisting role="php">
<![CDATA[
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>Example</title>
    </head>
    <body>

        <?php
            echo "Hi, I'm a PHP script!";
        ?>

    </body>
</html>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Instead of lots of commands to output HTML (as seen in C or Perl),
    PHP pages contain HTML with embedded code that does
    "something" (in this case, output "Hi, I'm a PHP script!").
    The PHP code is enclosed in special <link
    linkend="language.basic-syntax.phpmode">start and end processing
    instructions <code>&lt;?php</code> and <code>?&gt;</code></link>
    that allow you to jump into and out of "PHP mode."
   </para>
   <para>
    What distinguishes PHP from something like client-side JavaScript
    is that the code is executed on the server, generating HTML which
    is then sent to the client. The client would receive
    the results of running that script, but would not know
    what the underlying code was. You can even configure your web server
    to process all your HTML files with PHP, and then there's really no
    way that users can tell what you have up your sleeve.
   </para>
   <para>
    The best things in using PHP are that it is extremely simple
    for a newcomer, but offers many advanced features for
    a professional programmer. Don't be afraid reading the long
    list of PHP's features. You can jump in, in a short time, and
    start writing simple scripts in a few hours.
   </para>
   <para>
    Although PHP's development is focused on server-side scripting,
    you can do even more with it. Read on, and see more in the
    <link linkend="install-intro.intro.hhvm">What can HHVM do?</link> section,
    which describes a runtime for PHP called HHVM. Or go right to the
    <link linkend="appendices.tutorial"> introductory tutorial</link> if you are only
    interested in web programming.
   </para>
  </section>

  <section xml:id="install-intro.intro.hack">
    <info><title>What is Hack?</title></info>
    <para>
      Hack is a programming language for HHVM that interoperates seamlessly with PHP. In general, anything you can write in PHP, you can also write in Hack. Take the example in the <link linkend="install-intro.intro.php">What is PHP section</link>.
    </para>
    <para>
      <example>
        <info><title>An introductory Hack example</title></info>
        <programlisting role="php">
<![CDATA[
<?hh
echo "Hi, I'm a Hack script!";
]]>
        </programlisting>
        <para>
          The primary changes were changing the <literal>&lt;?php</literal> at the top to <literal>&lt;?hh</literal> and removing the HTML (and the change to the output string, obviously).
        </para>
        <note>
          <para>
            Hack and HTML code do not mix. Normally you can intersperse PHP and HTML code together in the same file like:
           <informalexample>
            <programlisting role="html">
<![CDATA[
<html>
 <head>
  <title>PHP Test</title>
 </head>
 <body>
 <!-- hh and html do not mix -->
 <?php echo '<p>Hello World</p>'; ?>
 </body>
</html>
]]>
            </programlisting>
            <para>
              This code works fine in HHVM. You may jump in and out of PHP mode in an HTML file like this anywhere you want. But if you replace the <literal>&lt;?php</literal> with <literal>&lt;?hh</literal>, the code above will not work.
            </para>
          </informalexample>
        </para>
      </note>
      </example>
    </para>
    <para>
      Of course, Hack can support more complex scenarios, but starting with Hack can really be as simple as adding <literal>&lt;?hh</literal> to the top of your existing PHP file and writing the code to which you are accustomed, incrementally using Hack features at your leisure.
    </para>
    <note>
      <para>
        It is important to note that HHVM can run both your PHP and Hack code, either separately or when both are part of one project. HHVM is a runtime for both PHP and Hack.
      </para>
    </note>
  </section>
  <section xml:id="install-intro.intro.hhvm">
   <info><title>What can HHVM do?</title></info>
   <para>
    Nearly anything. HHVM is mainly focused on server-side scripting, so you can collect form data, generate dynamic page content, or send and receive cookies. But HHVM can do much more. </para>
   <para>
    There are two main areas where HHVM scripts are used.
    <itemizedlist>
     <listitem>
      <simpara>
       Server-side scripting. This is the most traditional and main target field for HHVM. You need three things to make this work. The HHVM parser, a web server and a web browser. You need to run the web server, with a connected HHVM installation. You can access the Hack program output with a web browser, viewing the Hack page through the server. All these can run on your home machine if you are just experimenting with Hack programming. See the <link linkend="install-intro.install">installation instructions</link> section for more information on how to install HHVM.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Command line scripting. You can make an HHVM script to run it without any server or browser. You only need the HHVM parser to use it this way. This type of usage is ideal for regularly executed scripts or testing new libraries and functionality. These scripts can also be used for simple text processing tasks. See the section about <link linkend="features.commandline">Command line usage of HHVM</link> for more information.
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    HHVM is fully <link linkend="install-intro.install">available</link> on major variants of the Linux operating system, including Ubuntu, CentOS, Debian, etc. HHVM can be installed on Mac OS X to run in interpreted mode (no JIT, but that is being actively developed). Windows support is actively being developed. HHVM has also support for most of the web servers today. This includes any web server that can utilize the FastCGI protocol, like Apache, lighttpd and nginx.</para>
   <para>
    So with HHVM, you have the freedom of choosing an operating system and a web server. Furthermore, you also have the choice of using procedural programming or object oriented programming (OOP), or a mixture of them both. And, of course, you can choose to use Hack or PHP as your programming language. </para>
   <para>
    With HHVM you are not limited to output HTML. HHVM's abilities includes outputting images, PDF files and even Flash movies (using libswf and Ming) generated on the fly. You can also output easily any text, such as XHTML and any other XML file. HHVM can autogenerate these files, and save them in the file system, instead of printing it out, forming a server-side cache for your dynamic content.
   </para>
   <para>
    One of the strongest and most significant features in HHVM is its support for a <link linkend="refs.database">wide range of databases</link>. Writing a database-enabled web page is incredibly simple using one of the database specific extensions (e.g., for <link linkend="book.mysqli">mysql</link>), or using an abstraction layer like <link linkend="book.pdo">PDO</link>, or connect to any database supporting the Open Database Connection standard via the <link linkend="book.uodbc">ODBC</link> extension. Other databases may utilize <link linkend="book.curl">cURL</link> or <link linkend="book.sockets">sockets</link>.
   </para>
   <para>
    HHVM also has support for talking to other services using protocols such as LDAP, IMAP, HTTP, and others. You can also open raw network sockets and interact using any other protocol. HHVM has support for the WDDX complex data exchange between virtually all Web programming languages.
   </para>
   <para>
    HHVM has useful <link linkend="refs.basic.text">text processing</link> features, which includes the Perl compatible regular expressions (<link linkend="book.pcre">PCRE</link>), and many extensions and tools to <link linkend="refs.xml">parse and access XML documents</link>. HHVM standardizes all of the XML extensions on the solid base of <link linkend="book.libxml">libxml2</link>, and extends the feature set adding <link linkend="book.simplexml">SimpleXML</link>, <link linkend="book.xmlreader">XMLReader</link> and <link linkend="book.xmlwriter">XMLWriter</link> support.
   </para>
   <para>
    And many other interesting extensions exist, which are categorized both <link linkend="extensions">alphabetically</link> and by <link linkend="phpfuncref">PHP category</link> and <link linkend="hackfuncref">Hack category</link>.
   </para>
   <para>
    As you can see this page is not enough to list all the features and benefits PHP and Hack can offer. Read on in the sections about <link linkend="install-intro.install">installing HHVM</link>, and see the <link linkend="phpfuncref">PHP function reference</link> and the <link linkend="hackfuncref">Hack function reference</link> for explanation of the extensions mentioned here.
   </para>
  </section>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
